class GateInterpolator : Object
{
	vector2 mValue;//X is where you are, Y is where you started

	static GateInterpolator Create(float startval)
	{
		let fi = new("GateInterpolator");
		fi.mValue = (startval, startval);
		return fi;
	}
	void Reset()
	{
		mValue.Y = mValue.X;
	}
	bool Update(float destvalue, float mMaxChange = 1.0)
	{
		float dif = abs(mValue.X - destvalue);
		if(mMaxChange > dif)
			mMaxChange = dif;
		if(int(mValue.X) == int(destvalue))//if we're close enough to the startint position then we nudge it into place regardless of what the change actually is
			mValue.X = destvalue;
		else if(mValue.X != destvalue)//if we aren't at the dest val we need to go there
			mValue.X += mValue.X > destvalue ? -mMaxChange : mMaxChange;

		return (mValue.X == destvalue);
	}
	float GetValue()
	{
		return mValue.X;
	}
}

class skp_RollerGate : actor 
{
	bool user_SpawnOpen, user_LockMsg, havetoggled, AtDest;
	string user_LockMsgTxt;
	int user_Frame;
	int user_Radius, user_Reset, Reset;
	double user_height, offsetTarget, user_rollspeed;
	vector3 BasePos;
	meta string DefaultMsg;
	property DefaultMsg : DefaultMsg;
	
	GateInterpolator GateMover;
	Default 
	{
		//$Title "Thing Gate"
		//$Category "Thing Gates"
		//+NOBLOCKMAP;
		+NOGRAVITY;
		+WALLSPRITE;
		skp_RollerGate.DefaultMsg "This door is opened elsewhere.";
		radius 48;
		//+SOLID;
	}

	Override bool Used(Actor user)
	{
		if(!user || !user_LockMsg)
			return false;
		user.A_StartSound("*usefail", CHAN_AUTO, CHANF_UI);
		user.A_Print(string.format("%i\r%s", 3*35, user_LockMsgTxt.Length() ? user_LockMsgTxt : DefaultMsg));
		return true;
	}

	void LockSectorLines (sector CurSec, bool lock = true)
	{

		for (int i = 0; i < CurSec.lines.size(); i++) 
        {
            line ln = CurSec.lines[i];
			if (ln && (ln.flags & Line.ML_TWOSIDED) ) 
			{
				if (lock)
				{
					A_ChangeLinkFlags(0,0);
					if(target)
						target.A_ChangeLinkFlags(0,0);
					SetLineFlags(ln, Line.ML_BLOCKEVERYTHING);
					SetLineFlags(ln, Line.ML_SOUNDBLOCK);
					SetLineFlags(ln, Line.ML_BLOCKSIGHT);
				}
				else 
				{
					A_ChangeLinkFlags(1,0);
					if(target)
						target.A_ChangeLinkFlags(1,0);
					SetLineFlags(ln, 0, Line.ML_BLOCKEVERYTHING);
					SetLineFlags(ln, 0, Line.ML_SOUNDBLOCK);
					SetLineFlags(ln, 0, Line.ML_BLOCKSIGHT);
				}
			}
        }
	}
	void SetLineFlags(line ln, int setflags, int clearflags = 0)
	{
		ln.flags = (ln.flags & ~clearflags) | setflags;
	}
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		BasePos = self.pos;
		GateMover = GateInterpolator.Create(0);
		if(user_Frame)
			frame = user_Frame;
		if(!user_rollspeed)
			user_rollspeed = 1.5;
		if (!user_height) 
			user_height = Abs(CurSector.CenterFloor() - CurSector.CenterCeiling()) - 6;
		if(user_SpawnOpen)
			self.activate(self);
		else
			LockSectorLines(CurSector, true);
	}
	override void activate(actor activator)
	{
		havetoggled = false;
		if(int(offsetTarget) == 0)
		{
			offsetTarget = -1 * user_height;
			SetStateLabel("Opening");
		}
		else
		{
			offsetTarget = 0;
			SetStateLabel("Closing");
			LockSectorLines(CurSector, true);
		}
	}
	override void deactivate(actor activator)
	{
		if(offsetTarget == 0)
		{
			havetoggled = false;
			offsetTarget = 0;
			if(!AtDest)
				A_StartSound("powerdoor9/close", CHAN_BODY);
			LockSectorLines(CurSector, true);
		}
	}
	virtual void DoorMove()
	{
		AtDest = GateMover.Update(offsetTarget, user_rollspeed);
		if(ABS(GateMover.GetValue()) > user_height/2 && !havetoggled)
		{
			if(offsetTarget != 0)
				LockSectorLines(CurSector, false);
			else
			{
				LockSectorLines(CurSector, true);
				self.bSOLID = !self.bNOBLOCKMAP;
			}
			havetoggled = true;
		}
		SetOrigin((BasePos.X, BasePos.Y, BasePos.Z - GateMover.GetValue()), TRUE);
	}

	States 
	{
		Opening:
			RLDR # 0 A_StartSound("doors/dr1_open", CHAN_BODY);
			RLDR # 1 DoorMove();
			Wait;
		Closing:
			RLDR # 0 A_StartSound("doors/dr1_clos", CHAN_BODY);
			RLDR # 1 DoorMove();
			Wait;
		Spawn:
			RLDR A 0;
			RLDR # -1;
			Stop;
	}
}

class skp_RollerGate_Proximity : skp_RollerGate
{
	Default 
	{
		//$Title "Thing Gate - Proximity"
		//$Category "Thing Gates"
		+SOLID;
		-NOBLOCKMAP;
	}
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if(!user_Radius)
			user_Radius = 128;
		if(!user_Reset)
			user_Reset = 150;
		A_SetSize(user_Radius, user_height);
	}
	Override bool CanCollideWith(Actor other, bool passive)
	{
		if(other is "PlayerPawn")
		{
			bSOLID = FALSE;
			self.Activate(self);
		}
		return false;
	}
	States 
	{
		Opening:
			RLDR # 0 A_StartSound("doors/dr1_open", CHAN_BODY);
			RLDR # 1
			{
				DoorMove();
				if(AtDest && self.pos.Z != BasePos.Z)
					SetStateLabel("Open");
			}
			Wait;
		Open:
			RLDR # 0
			{
				Reset = user_Reset;
			}
			RLDR # 1
			{
				DoorMove();
				reset--;
				if(user_Reset > 0 && reset <= 0)
					Activate(self);
			}
			Wait;
		Closing:
			RLDR # 0 A_StartSound("doors/dr1_clos", CHAN_BODY);
			RLDR # 1
			{
				DoorMove();
				if(AtDest && self.pos.Z != BasePos.Z)
					SetStateLabel("Closed");
			}
			Wait;
		Closed:
			RLDR # 1 DoorMove();
			Wait;
		Spawn:
			RLDR F 0;
			RLDR # -1;
			Stop;
	}
}

class skp_RollerGate_Decoration : skp_RollerGate
{
	bool user_NoBlock;
	default
	{
		//$Title "Thing Gate - Decoration"
		//$Category "Thing Gates"
	}
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		if(user_Frame)
			frame = user_Frame;
		else if(user_height > 72)
			frame = 1;
		LockSectorLines(CurSector, !user_NoBlock);
	}
	override void activate(actor activator)
	{
		return;
	}
	override void deactivate(actor activator)
	{
		return;
	}
	States 
	{
		Spawn:
			RLDB A 0;
			RLDB # -1;
			Stop;
	}
}

class skp_RollerGateSign : skp_RollerGate
{
	meta string DefaultBackMsg;
	property DefaultBackMsg : DefaultBackMsg;
	default
	{
		//$Title "Thing Gate"
		//$Category "Thing Gates One Way"
		+MASKROTATION;
		VisibleAngles 90, -90;
		VisiblePitch -180,180;
		skp_RollerGate.DefaultMsg "Authorized Personnel \c[red]ONLY!\cl";
		skp_RollerGateSign.DefaultBackMsg "You can't read the sign from this side.";
		Dropitem "skp_RollerGateSignBack", -1;
	}
	Override bool CanCollideWith(Actor other, bool passive)
	{
		return false;
	}
	Override Void PostBeginPlay()
	{
		super.PostBeginPlay();
		user_LockMsg = true;
		user_Frame = false;
		DropItem di = GetDropItems();
		if(di)
			target = spawn(di.name, self.Pos);
		if(target)
		{
			target.SetOrigin((BasePos.X, BasePos.Y, BasePos.Z - GateMover.GetValue()), TRUE);
			target.angle = self.angle + 180;
		}
	}
	Override bool Used(Actor user)
	{
		if(!user)
			return false;
		if((DeltaAngle(AngleTo(user), self.angle) + 90) % 360 <= 180)
			return super.Used(user);
		else
		{
			user.A_StartSound("*usefail", CHAN_AUTO, CHANF_UI);
			user.A_Print(string.format("%i\r%s", 3*35, DefaultBackMsg));
			return true;
		}
		return false;
	}
	Override void DoorMove()
	{
		AtDest = GateMover.Update(offsetTarget, user_rollspeed);
		if(ABS(GateMover.GetValue()) > user_height/2 && !havetoggled)
		{
			if(offsetTarget != 0)
				LockSectorLines(CurSector, false);
			else
			{
				LockSectorLines(CurSector, true);
				self.bSOLID = !self.bNOBLOCKMAP;
			}
			havetoggled = true;
		}

		SetOrigin((BasePos.X, BasePos.Y, BasePos.Z - GateMover.GetValue()), TRUE);
		if(target)
		{
			target.SetOrigin((BasePos.X, BasePos.Y, BasePos.Z - GateMover.GetValue()), TRUE);
			target.angle = self.angle + 180;
		}
	}
	States 
	{
		Opening:
			RLOS A 0 A_StartSound("doors/dr1_open", CHAN_BODY);
			RLOS A 1
			{
				DoorMove();
				if(AtDest && self.pos.Z != BasePos.Z)
					SetStateLabel("Open");
			}
			Wait;
		Open:
			RLOS A 0
			{
				Reset = user_Reset;
			}
			RLOS A 1
			{
				DoorMove();
				reset--;
				if(user_Reset > 0 && reset <= 0)
					Activate(self);
			}
			Wait;
		Closing:
			RLOS A 0 A_StartSound("doors/dr1_clos", CHAN_BODY);
			RLOS A 1
			{
				DoorMove();
				if(AtDest && self.pos.Z != BasePos.Z)
					SetStateLabel("Closed");
			}
			Wait;
		Closed:
			RLOS A 1 DoorMove();
			Wait;
		Spawn:
			RLOS A -1;
			Stop;
	}
}

class skp_RollerGateSignBack : actor
{
	default
	{
		+NOGRAVITY;
		+WALLSPRITE;
		+NOBLOCKMAP;
		+NOINTERACTION;
		+MASKROTATION;
		-SOLID;
		VisibleAngles 90, -90;
		VisiblePitch -180,180;
	}
	States
	{
	Spawn:
		RLOS B -1;
		Stop;
	}
}