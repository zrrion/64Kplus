class ThriftyHealth : Health 
{
	bool BigPickup;
	property BigPickup: BigPickup;

	String PickupMsg;
	String PickupOpenMsg;
	property PickupMsg: PickupMsg;
	property PickupOpenMsg: PickupOpenMsg;
	
	Class<Inventory> SmallPickup;
	property SmallPickup: SmallPickup;
	
	int AmountHolder;
	
	Default
	{
		ThriftyHealth.BigPickup false;
		ThriftyHealth.SmallPickup "ThriftyMiniStimpack";
		ThriftyHealth.PickupMsg "You picked up some health.";
		ThriftyHealth.PickupOpenMsg "You opened a box of medical supplies.";
		
	}
	
	/*Override String PickupMessage ()//removed the low health message. can't be bothered to impliment it
	{
		if(amount > 0)
			return string.Format("%s (+%i)", StringTable.Localize(self.PickupMsg), amount);
		else if(AmountHolder > 0)
			return string.Format("%s (+%i)", StringTable.Localize(self.PickupMsg), AmountHolder);
		else
			return self.PickupMsg;
	}*/
	
	Override bool TryPickup(in out Actor Toucher)
	{
	int ToucherAmount = Toucher.Health;
	int ToucherMax = Toucher.GetMaxHealth(true);//t == NULL ? 100 : t.MaxHealth == 0 ? 100 : t.MaxHealth;
	int ToucherNeed = Abs(ToucherAmount - ToucherMax);//just in case
	int SmallPickupAmount = GetDefaultByType(self.SmallPickup).Amount;
	
		if(self.Amount + ToucherAmount <= ToucherMax)//this checks to see if we can pick up the entire thing
		{
			PickupMsg = self.PickupMsg;
			return Super.TryPickup(Toucher);
		}
		else if(ToucherAmount < ToucherMax && BigPickup)//do we need health at all
		{
			PickupMsg = self.PickupOpenMsg;//we are opening the box
			//Toucher.Health += ToucherNeed;//doing it this way apparently breaks how health works
			Toucher.A_GiveInventory("HealthBonus", ToucherNeed);
			AmountHolder = ToucherNeed;
			self.Amount -= ToucherNeed;//remove the amount of the spawned pickup from the amount
			
			While(self.Amount >= SmallPickupAmount)
			{
				A_DropItem(self.SmallPickup, SmallPickupAmount);//drop a pickup with the normal amount
				self.Amount -= SmallPickupAmount;//remove that amount from the total
			}
			if(self.Amount > 0)
			{
				A_DropItem(self.SmallPickup, self.Amount);//drop a pickup with the normal amount
				self.Amount *= 0;
			}
			
			bALWAYSPICKUP = true;
			return Super.TryPickup(Toucher);
		}
		return bPickupGood;
	}
//====
	Override void PostBeginPlay()
	{
		if(bDROPPED && ACS_ScriptCall("CVarCheck",1))
			bWALLSPRITE = TRUE;
		A_SetAngle(Random(0,360));
	Super.PostBeginPlay();
	}
	Override void Tick()
	{
		if(isFrozen())
			return;
		if(bDROPPED && ACS_ScriptCall("CVarCheck",1))
		{
			bWALLSPRITE = TRUE;
			self.angle += fRandom(3.0,4.0);
		}
		else
			bWALLSPRITE = FALSE;
		Super.Tick();
	}
//====
	Override bool Grind(bool items)
	{
		if (!items)
		{
			return false;
		}
		if (bDropped && self.BigPickup)
		{
			if (!bDontGib)
			{
				int SmallPickupAmount = GetDefaultByType(self.SmallPickup).Amount;
				While(self.Amount >= SmallPickupAmount)
				{
					A_DropItem(self.SmallPickup, SmallPickupAmount);//drop a pickup with the normal amount
					self.Amount -= SmallPickupAmount;//remove that amount from the total
				}
				if(self.Amount > 0)
				{
					A_DropItem(self.SmallPickup, self.Amount);//drop a pickup with the normal amount
					self.Amount *= 0;
				}
				Destroy();
			}
			return false;
		}
		return Super.Grind(items);
	}	
}

extend class ThriftyHealth
{
	Actor A_DropItem(class<Actor> item, int dropamount = -1, int chance = 256)
	{
		if (item != NULL && random[DropItem]() <= chance)
		{
			Actor mo;
			double spawnz = 0;

			if (!(Level.compatflags & COMPATF_NOTOSSDROPS))
			{
				int style = sv_dropstyle;
				if (style == 0)
				{
					style = gameinfo.defaultdropstyle;
				}
				if (style == 2)
				{
					spawnz = 24;
				}
				else
				{
					spawnz = Height / 2;
				}
			}
			mo = Spawn(item, pos + (0, 0, spawnz), ALLOW_REPLACE);
			if (mo != NULL)
			{
				mo.bDropped = true;
				mo.bDontgib = true;//!self.bDropped;
				mo.bNoGravity = false;	// [RH] Make sure it is affected by gravity
				if (!(Level.compatflags & COMPATF_NOTOSSDROPS))
				{
					mo.TossItem ();
				}
				let inv = Inventory(mo);
				if (inv)
				{
					inv.ModifyDropAmount(dropamount);
					inv.bTossed = true;
					if (inv.SpecialDropAction(self))
					{
						// The special action indicates that the item should not spawn
						inv.Destroy();
						return null;
					}
				}
				return mo;
			}
		}
		return NULL;
	}
}