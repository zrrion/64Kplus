class ThriftyAmmo : ammo
{
	bool BigPickup;
	property BigPickup: BigPickup;
	
	String PickupMsg;
	String PickupOpenMsg;
	property PickupMsg: PickupMsg;
	property PickupOpenMsg: PickupOpenMsg;
	
	Class<Ammo> AmmoType;
	property AmmoType: AmmoType;
	Class<Ammo> SmallPickup;
	property SmallPickup: SmallPickup;
	int AmountHolder;
	
	Default
	{
		ThriftyAmmo.AmmoType "Clip";
		ThriftyAmmo.SmallPickup "Clip";
		ThriftyAmmo.BigPickup FALSE;
		ThriftyAmmo.PickupMsg "You picked up some ammo";
		ThriftyAmmo.PickupOpenMsg "You opened a box of ammo";
		
	}
//==== 
	Override Class<Ammo> GetParentAmmo ()
	{
		class<Object> type = GetClass();
		type = self.AmmoType;
		return (class<Ammo>)(type);
	}
	Override bool TryPickup(in out Actor Toucher)
	{
	let ToucherAmmo = Toucher.FindInventory(self.AmmoType);//the kind of ammo we are looking for
	int ToucherAmount = ToucherAmmo ? ToucherAmmo.Amount : 0;//if the player has this in their inventory it will return how many they have, if they have none it returns 0
	int ToucherMax = ToucherAmmo ? ToucherAmmo.MaxAmount : GetDefaultByType(self.AmmoType).MaxAmount;//if the player has this in their inventory it will return the max amount, if they don't have any it returns the default max amount
	int ToucherNeed = Abs(ToucherAmount - ToucherMax);
	int AdjustedAmount = bIgnoreSkill ? Amount : Amount*G_SkillPropertyFloat(SKILLP_AmmoFactor);
	int SmallPickupAmount = GetDefaultByType(self.SmallPickup).Amount;//the default amount the small pickup gets you
	int OpenAmount = (AdjustedAmount % SmallPickupAmount == 0) ? SmallPickupAmount : AdjustedAmount % SmallPickupAmount;
	
	if(AdjustedAmount + ToucherAmount <= ToucherMax)//this checks to see if we can pick up the entire thing
		{
			//PickupMsg = self.PickupMsg;
			return Super.TryPickup(Toucher);//if it is valid for pickup call the OG funtion, it is less strict so it should always pick up something if it gets called
		}
		
		else if(ToucherAmount < ToucherMax && BigPickup)//do we need health at all
		{
			PickupMsg = self.PickupOpenMsg;//we are opening the box
			Toucher.A_GiveInventory(self.AmmoType,ToucherNeed);
			AmountHolder = ToucherNeed;
			self.Amount -= ToucherNeed;//remove the amount of the spawned pickup from the amount

			While(self.Amount >= SmallPickupAmount)//so long as we have enough for a full pickup drop a full pickup
			{
				A_DropItem(self.SmallPickup, SmallPickupAmount);//drop a pickup with the normal amount
				self.Amount -= SmallPickupAmount;//remove that amount from the total
			}
			if(self.Amount > 0)//if we get here and still have amount it means we have less than a full smal pickup so we just drop a partial
			{
				A_DropItem(self.SmallPickup, self.Amount);
				self.Amount *= 0;
			}
			self.bALWAYSPICKUP = true;
			return Super.TryPickup(Toucher);
		}
		
		return bPickupGood;//this sort of thing never feels kosher but hey
	}
//====
	Override void PostBeginPlay()
	{
		if(bDROPPED && ACS_ScriptCall("CVarCheck",1))
			bWALLSPRITE = TRUE;
		A_SetAngle(Random(0,360));
	Super.PostBeginPlay();
	}
	Override void Tick()
	{
		if(isFrozen())
			return;
		if(bDROPPED && ACS_ScriptCall("CVarCheck",1))
		{
			bWALLSPRITE = TRUE;
			self.angle += fRandom(3.0,4.0);
		}
		else
			bWALLSPRITE = FALSE;
		Super.Tick();
	}
	/*Override String PickupMessage ()
	{
		if(amount > 0)
			return string.Format("%s (+%i)", StringTable.Localize(self.PickupMsg), amount);
		else if(AmountHolder > 0)
			return string.Format("%s (+%i)", StringTable.Localize(self.PickupMsg), AmountHolder);
		else
			return self.PickupMsg;
	}*/
//====
	Override bool Grind(bool items)
	{
		if (!items)
		{
			return false;
		}
		if (bDropped && self.BigPickup)
		{
			if (!bDontGib)
			{
				int SmallPickupAmount = GetDefaultByType(self.SmallPickup).Amount;
				While(self.Amount >= SmallPickupAmount)
				{
					A_DropItem(self.SmallPickup, SmallPickupAmount);//drop a pickup with the normal amount
					self.Amount -= SmallPickupAmount;//remove that amount from the total
				}
				if(self.Amount > 0)
				{
					A_DropItem(self.SmallPickup, self.Amount);//drop a pickup with the normal amount
					self.Amount *= 0;
				}
				Destroy();
			}
			return false;
		}
		return Super.Grind(items);
	}	
}

extend class ThriftyAmmo
{
	Actor A_DropItem(class<Actor> item, int dropamount = -1, int chance = 256)
	{
		if (item != NULL && random[DropItem]() <= chance)
		{
			Actor mo;
			double spawnz = 0;

			if (!(Level.compatflags & COMPATF_NOTOSSDROPS))
			{
				int style = sv_dropstyle;
				if (style == 0)
				{
					style = gameinfo.defaultdropstyle;
				}
				if (style == 2)
				{
					spawnz = 24;
				}
				else
				{
					spawnz = Height / 2;
				}
			}
			mo = Spawn(item, pos + (0, 0, spawnz), ALLOW_REPLACE);
			if (mo != NULL)
			{
				mo.bDropped = true;
				mo.bDontgib = true;//!self.bDropped;
				mo.bNoGravity = false;	// [RH] Make sure it is affected by gravity
				if (!(Level.compatflags & COMPATF_NOTOSSDROPS))
				{
					mo.TossItem ();
				}
				let inv = Inventory(mo);
				if (inv)
				{
					inv.ModifyDropAmount(dropamount);
					inv.bTossed = true;
					if (inv.SpecialDropAction(self))
					{
						// The special action indicates that the item should not spawn
						inv.Destroy();
						return null;
					}
				}
				return mo;
			}
		}
		return NULL;
	}
}