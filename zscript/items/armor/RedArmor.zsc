// armor that converts the armor you have into some health
// (up to full, armor>health conversion factors for savepercent) and then gives
// you additional armor

class SKP_RedArmor : CustomCustomInventory
{
	Default
	{
		//$Category Health and Armor
		Inventory.Pickupmessage "";
		Inventory.Icon "RARMA0";
		+SYNCHRONIZED;
	}
//====	
	States
	{
		Spawn:
			RARM A 12;
			RARM B 14 Bright;
			loop;
		Pickup:
			TNT1 A 0 A_HealthConvert();
			Stop;
	}
//====	
	Override void PostBeginPlay()
	{
		super.PostBeginPlay();
		if(level.time)
		{
			if(!curstate.tics)
				Tick();
			int DurOffset = level.time % 26;
			while(DurOffset > 1)
			{
				DurOffset--;
				Tick();
			}
		}
	}
	Override void Tick()
	{
		self.angle += bWALLSPRITE ? fRandom(3.0,4.0) : 0;
		Super.Tick();
	}
	action void A_HealthConvert()
	{
		let Player = self;
		let Armor = BasicArmor(Player.FindInventory("BasicArmor"));
		int HealthGain;
		While (Armor != NULL && Player.Health < Player.GetMaxHealth(true) && Armor.Amount > 0)
			{
				int ArmorFactor = (Armor.SavePercent * 100 < 50 ? 1 : 2);//if the savepercent is < 50%, take 1, otherwise take 2
			
				A_SetInventory("BasicArmor", Armor.Amount - ArmorFactor);	
				A_GiveInventory("HealthBonus", 1);
				HealthGain ++;
			}
		for(int i = 0; i < 100; i++)
			A_GiveInventory("SKP_RedArmorBonus", 1);
			
		if(HealthGain == 0)
			invoker.A_SetPickupMessage("Picked up the red armor. \cr(+100 armor)\cl");
		else
			invoker.A_SetPickupMessage(String.Format("%s%i%s","Picked up the red armor. \cr(+", HealthGain, " health | +100 armor)\cl"));
	}
}

class SKP_RedArmorBonus : ArmorBonus
{
Default
	{
		Armor.SavePercent 50;
	}
}