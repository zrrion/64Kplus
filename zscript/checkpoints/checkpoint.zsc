extend class skp_DoomPlayer
{
	skp_SavepointBase LastCheckPoint;
}

class skp_CheckpointBase : skp_SavepointBase
{
int user_TPDestTID;
	Default
	{
		//$Category Savepoints
	}
	Override void Activate(Actor activator)
	{
		let Doom = skp_DoomPlayer(activator);
		if(Doom && !flip)
		{
			target = Doom;
			if(Doom.LastCheckPoint)
				Doom.LastCheckPoint.Reactivate();
			Doom.LastCheckPoint = self;
			Savepoint();
		}
		else
		{
			A_StartSound("*usefail", CHAN_AUTO, CHANF_UI);
		}
	}
	Override void Reactivate()
	{
		self.Flip = FALSE;
		SetStateLabel("Open");
	}
	Override void Savepoint()
	{
		self.Flip = TRUE;
		target.A_Print("Checkpoint reached.");
		A_StartSound("Checkpoint/save", CHAN_AUTO, CHANF_UI);
		A_Warp(self.user_TPDestTID,target.pos.x,target.pos.y,target.pos.z,target.angle,WARPF_ABSOLUTEANGLE|WARPF_ABSOLUTEPOSITION|WARPF_NOCHECKPOSITION|WARPF_STOP|WARPF_MOVEPTR|WARPF_USETID);
		ActorIterator it = level.CreateActorIterator(self.user_TPDestTID);
		Actor mo = it.Next();
		if (mo)
			self.tracer = mo;

		SetStateLabel("Close");
	}
	Override void ResetWait()
	{
		if(tracer && level.totaltime % 4 == 0)
		{
			Vector3 tfxpos;
			tfxpos.x = tracer.pos.x + frandom(-16,16);
			tfxpos.y += tracer.pos.y + frandom(-16,16);
			tfxpos.z += tracer.pos.z + 0.125;
			let tfx = Spawn("Zar_TeleGlitter1",tfxpos);
			tfx.vel.z += 0.25;
		}
	}
}

class GreenCheckpoint : skp_CheckpointBase
{
	Default
	{
		//$Category Savepoints
	}
	States
	{
		Spawn:
		Open:
			GBCP I 1;
			Wait;
		Close:
			GBCP H 1 ResetWait();
			Wait;
	}
}

class RedCheckpoint : skp_CheckpointBase
{
	Default
	{
		//$Category Savepoints
	}
	States
	{
		Spawn:
		Open:
			RBCP I 1;
			Wait;
		Close:
			RBCP H 1 ResetWait();
			Wait;
	}
}

class YellowCheckpoint : skp_CheckpointBase
{
	Default
	{
		//$Category Savepoints
	}
	States
	{
		Spawn:
		Open:
			YBCP I 1;
			Wait;
		Close:
			YBCP H 1 ResetWait();
			Wait;
	}
}