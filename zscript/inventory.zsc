class CustomCustomInventory : CustomInventory//Actor
{
	string PickupMsg;
	
	override string PickupMessage()
    {
		return PickupMsg;
    }
	
	void A_SetPickupMessage(string Message)
    {
		self.PickupMsg = Message;
    }
}

class PickupMsgHandler : Inventory
{
	default
	{
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.KEEPDEPLETED;
		+INVENTORY.UNTOSSABLE;
	}

	override void Tick()
	{
		super.Tick();
		if(!owner)
			return;
		if(inv)//this should force this to be at the end of the inventory list
		{
			array<inventory> Crime;
			/*for (inventory item = owner.Inv; item != null; item = item.Inv)
			{
				
			}*/
		}
	}

	/*override bool HandlePickup(Inventory item)
	{
		if(item && !PickupMsgFaker(Item))
			PickupMessager(item);
		return super.HandlePickup(item);
	}*/
	void PickupMessager(Inventory item)
	{
		if(item)
		{
			int PrintAmnt;
			if(Health(item) || Ammo(item) && item.amount)
				PrintAmnt = item.amount;
			if(BasicArmorBonus(item))
				PrintAmnt = BasicArmorBonus(item).SaveAmount;
			if(BasicArmorPickup(item))
				PrintAmnt = BasicArmorPickup(item).SaveAmount;
			if(Weapon(item))
				PrintAmnt = Weapon(item).AmmoGive1;
			if(PrintAmnt)
			{
				item.bQUIET = true;
				let PMF = PickupMsgFaker(spawn("PickupMsgFaker"));
				if(PMF)
				{
					PMF.PickupSound = item.PickupSound;
					PMF.FakeMsg = String.Format("%s (+%d)", item.PickupMessage(), PrintAmnt);
					PMF.Touch(owner);
				}
			}
		}
	}
}

class PickupMsgFaker : Inventory
{
	string FakeMsg;
	override string PickupMessage()
    {
		return FakeMsg;
	}
}

class PistolStart : inventory
{
	default
	{
		+INVENTORY.PERSISTENTPOWER;
		inventory.InterHubAmount 1;
		inventory.amount 1;
		inventory.maxamount 1;
		obituary "This level is played from a pistol start.";
		PistolStart.Perm FALSE;
	}
	array<inventory> OwnersStuff;
	inventory inv2;
	bool NoReset, Perm;
	actor OwnerPerm;
	property Perm : Perm;

	override void AttachToOwner(Actor other)
	{
		if(other && PlayerPawn(other))
		{
			PlayerPawn(other).bonushealth = 0;
			other.A_SetHealth(GetDefaultByType(other.GetClass()).Health);
		}
		if(other && self.Perm)
			OwnerPerm = other;
		if(other && other.inv)
		{
			PistolStart PistolStarted = PistolStart(other.FindInventory("PistolStart", TRUE));
			if(PistolStarted && PistolStarted.Perm)
			{
				let player = PlayerPawn(other);
				if(player)
				{
					DropItem di;
					if(PistolStarted.GetDropItems())
						di = PistolStarted.GetDropItems();
					else
						di = player.GetDropItems();
					while(di)
					{
						player.A_TakeInventory(di.Name, 0);
						di = di.next;
					}
					if(self.GetDropItems())
						di = self.GetDropItems();
					else
						di = player.GetDropItems();
					while(di)
					{
						player.A_GiveInventory(di.Name, di.amount);
						di = di.next;
					}

					if(self.GetDropItems())
						di = self.GetDropItems();
					else
						di = player.GetDropItems();
					while(di)
					{
						player.A_SetInventory(di.Name, di.amount);
						di = di.next;
					}
					player.player.mo.PickNewWeapon(NULL);
				}
				self.Destroy();
			}
			else
			{
				let TempInv = other.inv;
				while(TempInv)
				{
					if(!(TempInv is "health"))//add it to the list so long as it's not health
						OwnersStuff.Push(TempInv);
					TempInv = TempInv.inv;
				}
				for(int i = 0; i < OwnersStuff.Size(); i++)
					self.AddInventory(OwnersStuff[i]);
				OwnersStuff.Clear();
				if(PlayerPawn(other))
				{
					let player = PlayerPawn(other);
					player.DestroyAllInventory();
					DropItem di;
					if(self.GetDropItems())
						di = self.GetDropItems();
					else
						di = player.GetDropItems();
					while(di)
					{
						player.A_GiveInventory(di.Name);//first we give the player the stuff
						di = di.next;
					}
					if(self.GetDropItems())
						di = self.GetDropItems();
					else
						di = player.GetDropItems();
					while(di)
					{
						player.A_SetInventory(di.Name, di.Amount);//then we make sue they've got the correct amount
						di = di.next;
					}
				
				player.player.mo.PickNewWeapon(NULL);
				}
				if(inv)
					inv2 = inv;
				if(self.obituary && other.GetAge())
					other.A_Print(string.format("245\r%s\n\nYou'll get all your stuff back when you start the next level.", self.obituary));
				if(!other.GetAge())
					self.Destroy();
				else
					super.AttachToOwner(other);
			}
		}
	}

	override void PreTravelled()
	{
		if(owner)
		{
			let TempInv = self.inv2;
			while(TempInv)
			{
				if(!(TempInv is "key"))
					OwnersStuff.Push(TempInv);
				TempInv = TempInv.inv;
			}
			for(int i = 0; i < OwnersStuff.Size(); i++)
				owner.AddInventory(OwnersStuff[i]);
		}
		self.Destroy();
		if(OwnerPerm)
			OwnerPerm.A_GiveInventory(self.GetClassName(), 1);
	}
}

class PistolStartPermanent  : PistolStart
{
	default
	{
		obituary "";
		PistolStart.Perm TRUE;
	}
}

class FistStart : PistolStart
{
	default
	{
		obituary "This level is played from fist-only start.";
		DropItem "skp_fist", 255, 1;
	}
}

class FistStartPermanent  : PistolStart
{
	default
	{
		obituary "";
		PistolStart.Perm TRUE;
		DropItem "skp_fist", 255, 1;
	}
}

class RocketStart : FistStart
{
	default
	{
		obituary "This level is played from a rocket launcher start.";
		DropItem "skp_rocketlauncher", 255, 1;
		DropItem "rocketammo", 255, 100;
	}
}

class RocketStartPermanent  : PistolStart
{
	default
	{
		obituary "";
		PistolStart.Perm TRUE;
		DropItem "skp_rocketlauncher", 255, 1;
		DropItem "rocketammo", 255, 100;
	}
}