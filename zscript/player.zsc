enum ECheckSolidFootingFlags
{
    CSF_SOLIDGROUND = 1,
    CSF_SOLIDACTORS = 2,
    
    CSF_ALL = CSF_SOLIDGROUND|CSF_SOLIDACTORS,
}

// adapted from nashmove.pk3
//
class Z_NashMove : CustomInventory
{
	Default
	{
		Inventory.MaxAmount 1;
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		+INVENTORY.AUTOACTIVATE
	}

	// How much to reduce the slippery movement.
	// Lower number = less slippery.
	const DECEL_MULT = 0.9;

	bool bIsOnFloor(void)
	{
		return (Owner.Pos.Z == Owner.FloorZ) || (Owner.bOnMObj) || (PlayerPawn(Owner).player.onGround);
	}

	bool bIsInPain(void)
	{
		State PainState = Owner.FindState('Pain');
		if (PainState != NULL && Owner.InStateSequence(Owner.CurState, PainState))
		{
			return true;
		}
		return false;
	}
	double GetVelocity (void)
	{
		return Owner.Vel.Length();
	}
	override void Tick(void)
	{
		if (Owner && Owner is "PlayerPawn")
		{
			let Yer = PlayerPawn(Owner).player.cmd;
			if(bIsOnFloor())
			{
				Yer.ForwardMove *= 2.8f;
				Yer.SideMove *= 2.8f;
				if(!bIsInPain() && !(Yer.forwardmove||-Yer.sidemove))
				{
					owner.vel.xy *= DECEL_MULT;
					PlayerPawn(Owner).ViewBob = DECEL_MULT;
				}
				else
					owner.vel.xy *= 1.0;
				
				Yer.ForwardMove = 1.0;
				Yer.SideMove = 1.0;	
			}
			else
				owner.vel.xy *= 1.0;
		}
		Super.Tick();
	}
	States
	{
	Use:
		TNT1 A 0;
		Fail;
	Pickup:
		TNT1 A 0
		{
			return true;
		}
		Stop;
	}
}

class skp_DoomPlayer : DoomPlayer
{
	bool DoubleJump, CanBobReset;
	int JumpHangCounter, FallTimer, FuelRegen, LastMoveTic;
	double OldPitch, CurPO, JumpOffset, LandOffset, HardLandOffset, Ang, AngOld, AngVeryOld, ScaleOld, ScaleVeryOld, Oldvelz;
	Default
	{
	DropItem "Z_NashMove", 255, 1;//this is startitem lol
	DropItem "skp_Pistol", 255, 1;
	DropItem "skp_Fist", 255, 1;
	DropItem "Clip", 255, 50;
	//Player.ForwardMove 1.0;
	//Player.SideMove 1.0;
	}
	States
	{
		See:
			PLAY ABCD 4
			{
				float v = (self.vel.x + self.vel.y)/2;
				if(abs(v) >= 1)
					A_SetTics(4);
				else if(abs(v) > 0.5)
					A_SetTics(6);
				else
					A_SetTics(8);
			}
			Loop;
		Xdeath:
			TNT1 A 0 A_SpawnItemEx("skp_BloodMist", 0, 0, self.height * 0.75, random(-2,2), random(-2,2), 5, 0, SXF_USEBLOODCOLOR|SXF_NOCHECKPOSITION|SXF_TRANSFERRENDERSTYLE|SXF_TRANSFERALPHA);
			PLAY O 5;
			PLAY P 5 A_XScream;
			PLAY Q 5 A_NoBlocking;
			PLAY RSTUV 5;
			PLAY W -1;
			Stop;
	}
	Override void PostBeginPlay()
	{
		DoubleJump = FALSE;
		JumpHangCounter = 24;
		CurPO = 0;
		JumpOffset = 2.5;
		LandOffset = JumpOffset/2;
		HardLandOffset = JumpOffset*1.5;
		super.PostBeginPlay();
	}
	Override void Tick()
	{
		if (!player || !player.mo || player.mo != self)//this goes here just in case other peope do crimes 
		{
			Super.Tick();
			return;
		}
		
		if(CurPO != 0)
		{
			float d = (CurPO/abs(CurPO))/4;
			A_SetPitch(self.pitch + d, SPF_INTERPOLATE);
			CurPO -= d;//if the player's pitch has been adjusted one way or the other it shoould be moved back to 0
		}
		
		if(!player.onground && vel.z < 0)
			FallTimer++;
		if(player.onground && vel.z > Oldvelz && Oldvelz < 0 && GetFloorTerrain().TerrainName != 'RAS_Glue')
		{
			double HardVol = Abs(Oldvelz/24) > 2 ? 2 : Abs(Oldvelz/24);
			double SoftVol = Abs(Oldvelz/24) > 2 ? 2 : Abs(Oldvelz/12);
			
			if(FallTimer >= 12 && Oldvelz <= -12)
			{
				A_StartSound("*HardLand", CHAN_BODY, CHANF_OVERLAP, HardVol);//land
				A_StartSound("*SoftLand", CHAN_BODY, CHANF_OVERLAP, SoftVol);//softland
				CurPO += -1 * HardLandOffset;
				A_SetPitch(self.pitch + HardLandOffset, SPF_INTERPOLATE);
			}
			else if(FallTimer >= 6 && Oldvelz <= -6)
			{
				A_StartSound("*SoftLand", CHAN_BODY, CHANF_OVERLAP, SoftVol);//softland
				CurPO += -1 * LandOffset;
				A_SetPitch(self.pitch + LandOffset, SPF_INTERPOLATE);
			}
			else if(FallTimer >= 1)
			{
				A_StartSound("*SoftStep", CHAN_BODY, CHANF_OVERLAP, SoftVol/2, ATTN_NORM, 1 + frandom(0.3, -0.3));//softstep
			}
		}
		if(player.onground)
		{
			FallTimer = 0;
		}

		Oldvelz = vel.z;

		super.Tick();
	}

	Override void CheckJump()
	{
		if(waterlevel > 1)
		{
			super.CheckJump();
			return;
		}
		let player = self.player;
		
		int GlueFactor = (GetFloorTerrain().TerrainName == 'RAS_Glue' && pos.z <= floorz) ? 8 : 1;
		double jumpvelz = JumpZ * 35 / TICRATE;
		int buttons = player.cmd.buttons & (BT_JUMP);
		int oldbuttons = player.oldbuttons & (BT_JUMP);
		
		if (buttons)//&& !oldbuttons)//you have to be attempting to jump
		{
			if (player.crouchoffset != 0)//you can't jump while crouched
				player.crouching = 1;
			else if (waterlevel >= 2)//if you are underwater you swim
				Vel.Z = 4 * Speed;
			else if (bNoGravity)//with no gravity this is basically letting you fly
				Vel.Z = 3.;
			else if ((player.onground || FallTimer < 6) && player.jumpTics == 0)//if the player is on the ground or they have only recently left the ground and they have not recently jumped they are able to jump
			{
				if (Vel.Z > 0)
					Vel.Z += jumpvelz / GlueFactor;
				else
					Vel.Z = jumpvelz / GlueFactor;// if you are falling, stop doing that and then jump
				bOnMobj = False;
				player.jumpTics = JumpHangCounter;
				if (!(player.cheats & CF_PREDICTING) && GlueFactor == 1)
				{
					A_StartSound("player/jump", CHAN_BODY, CHAN_NOSTOP, 1, ATTN_IDLE, 0.95);
					CurPO += JumpOffset;
					A_SetPitch(self.pitch - JumpOffset, SPF_INTERPOLATE);
				}
				DoubleJump = False;
			}
			else if (!player.onground && DoubleJump && player.jumpTics <= 12 && CountInv("SKP_JumpBoots")+CountInv("SKP_JumpBoots_Perm") > 0)//only double jump if off the ground, double jumping is enabled, and the player has not recently jumped
			{
				Vel.Z = jumpvelz;
				bOnMobj = False;
				player.jumpTics = -1 * JumpHangCounter/2;
				if (!(player.cheats & CF_PREDICTING))
				{
					A_StartSound("player/doublejump", CHAN_BODY);
					CurPO += JumpOffset;
					A_SetPitch(self.pitch - JumpOffset, SPF_INTERPOLATE);
				}
				DoubleJump = False;
			}
		}
	}
	
	Override void PlayerThink()
	{
		if (player.jumpTics != 0)
		{
			if (player.JumpTics >= JumpHangCounter/2)//Player cannot jump or double jump for a time after jumping
				player.jumpTics--;
				
			if (player.jumpTics > 0 && player.jumpTics < JumpHangCounter && !(player.cmd.buttons & BT_JUMP))//player can only double jump if they are not holding the button
				DoubleJump = True;
				
			if ((player.onground || waterlevel > 0) && player.JumpTics < 0)
				player.jumpTics++;
				
			if ((player.onground || waterlevel > 0) && player.JumpTics > 0)
				player.jumpTics--;
		}
		Super.PlayerThink();
	}
	
	Override void TickPSprites()//put the weapon bobbing independent of the actual weapon itself that way we can tell when we are bobbing or not wihtout modifying the specific states and all that
	{
		let pspr = player.FindPSprite(1);//this is the player's weapon
		if(pspr != NULL)//does the player actually have a weapon? if not this won't work
		{
			AngVeryOld = AngOld;//these are mostly for keeping track of the prev. values so we can smooth out the animation
			AngOld = Ang;
			Ang = Angle;//there is one more for angle since that can change, but for scale we will always eventually go back to 1
			ScaleVeryOld = ScaleOld;
			ScaleOld = pspr.scale.x;
			
			double psx;//scale weighted by velocity and player direction, this is done later
			double DA = deltaangle(Ang, (AngOld + AngVeryOld)/2 );
			double ScaleAdj;
			double AngleDif = abs(DA) >= 16 ? 16 * (DA/abs(DA)) : DA;//caps the offset that the weapon gets from turning
			double AngleDifAdj = -0.25 * AngleDif * (-1*(Abs(Pitch)-90))/90;//controls how far the player's weapon moves left/right. This is scaled by the player's pitch
			double V =  sqrt(vel.x * vel.x + vel.y * vel.y);//just gets velocity
			int A = 0;//player direction, 1 means forward, -1 is backward, 0 is anyhting else
			int S = 75;
			
			if (player.WeaponState & WF_WEAPONBOBBING)//are we bobbing?
			{
				CanBobReset = TRUE;
				if(player.cmd.buttons & BT_FORWARD)//checks to see if we are pressing forward. Much easier than calculating relative velocity and comparing it to angle
				{
					A = 1;
					pspr.valign = PSPA_TOP;//when making the sprite larger it is better to anchor the top of the sprite so we don't make it take up too much of the screen
					pspr.halign = PSPA_CENTER;
				}
				if(player.cmd.buttons & BT_BACK)//check if going backward
				{
					A = -1;
					pspr.valign = PSPA_BOTTOM;//when making the sprite smaller we anchor to the bottom so we can't ever show the seam where the sprite ends
					pspr.halign = PSPA_CENTER;
				}
				psx = abs(((V*A)/S)) > 0.5 ? 0.5 * (((V*A)/S)/abs(((V*A)/S))) : ((V*A)/S);//now we actually factor velocity in, range is also capped as well as large/small values look really weird
				ScaleAdj = (1 + psx + pspr.scale.x + ScaleOld + ScaleVeryOld)/4;
				
				if (pspr && level.maptime)
				{
					pspr.x = 0 + AngleDifAdj;//move the weapon left/right relative to how much/fast they are turning
					pspr.y = WEAPONTOP + (pitch >= 0 ? pitch/18 : 0);//move the weapon down as they look down, not all weapons have tall enough sprites to move up
					
					pspr.scale.x = ScaleAdj;//scale the sprite larger as the player moves forward and smaller as they move farther away
					pspr.scale.y = pspr.scale.x;//keep the sprite square
				}
			}
			else if(!CanBobReset)//if we aren't bobbing a lot of stuff needs changed but only once
			{
				CanBobReset = FALSE;
				AngleDif = 0;//angledif is involved in part of the code that smooths out the animation as you turn, if it is 0 then the animation does not move from where it is
				psx = 1;//if we don't care about velocity because we aren't bobbing then this doesn't ned weighted, could be initialized to this value, but puting it here makes it clearer
				pspr.scale.x = psx;//to prevent the code from trying to smooth out the scale animation we need to reset these
				ScaleVeryOld = psx;//same
				ScaleOld = psx;//same
				ScaleAdj = psx;
			}
		}
		if(player.cmd.buttons & BT_USER2 && FALSE)
		{
			int layer = -2;
			let YerGun = player.FindPSprite(layer);
			if(!YerGun && player.ReadyWeapon)
			{
				YerGun = player.GetPSprite(layer);
				YerGun.SetState(player.ReadyWeapon.FindState("FlameBelch"));
				YerGun.x = -32;
				YerGun.y = WEAPONTOP;
				YerGun.scale.x = YerGun.scale.x;
				YerGun.scale.y = 1;
				Yergun.bAddWeapon = FALSE;
				Yergun.bAddBob = FALSE;
			}
		}
		/*if(player.ReadyWeapon != NULL && level.totaltime % 32 == 0)
			console.printf("%i",player.ReadyWeapon.Crosshair);*/
		
		Super.TickPSprites();//make the rest of the weapon do its thing
	}
	Action bool A_CheckTextureName(string flat, Actor mo)
	{
		int t = flat.length();
		string tex = Texman.GetName(mo.floorpic);
		tex.Truncate(t);
		return flat ~== tex;
	}
}