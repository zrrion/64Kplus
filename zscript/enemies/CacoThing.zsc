class Cacomera : Cacodemon
{
	mixin BerserkDroper;
	int User_TeleportTimer;
	
	Default
	{
		Health 300;
		radius 20;
		Height 56;
		Mass 400;
		Speed 8;
		PainChance 128;
		Monster;
		+FLOAT +NOGRAVITY
		SeeSound "caco/sight";
		PainSound "caco/pain";
		DeathSound "caco/death";
		ActiveSound "caco/active";
		Obituary "%o was killed by a cacomera bite.";
		HitObituary "%o was killed by a cacomera blast.";
		Tag "Cacomera";
	}
	
	Override void tick()
	{
		super.Tick();
		if(!bAMBUSH && target && !IsFrozen() && self.health > 0)
		{
			int myint = (16 - (2*G_SkillPropertyInt(SKILLP_ACSReturn)));
			if(bSUMMONEDMONSTER && GetAge() % myint == 0)//don't teleport the instant the target can be teleported near
				bSUMMONEDMONSTER = random(0,1);
			if(User_TeleportTimer < 1 && !bSUMMONEDMONSTER)
			{
				if(!DoTeleport(target, false))
					if(!DoTeleport(target, true) && User_TeleportTimer < -128)
						if(!DoTeleport(self, false))
							DoTeleport(self, true);
			}
			User_TeleportTimer--;
			if(!CheckSight(target, SF_SEEPASTSHOOTABLELINES|SF_IGNOREWATERBOUNDARY))
				User_TeleportTimer -= 3;
		}
	}
	bool DoTeleport(actor TeleportTarget = NULL, bool CheckGround = false)
	{
		if(!TeleportTarget && !target)
			return false;
		if(!TeleportTarget)
			TeleportTarget = target;

		bool paul;
		vector3 blart;
		int mallcop = 0;

		if(TeleportTarget is "LostSoul" && CheckTPDest(TeleportTarget.pos))
			blart = TeleportTarget.pos
		else
		{
		[paul, blart] = GetTPDest(TeleportTarget, CheckGround);
		while(!paul && CheckTPDest(blart) && mallcop++ < 10)
			[paul, blart] = GetTPDest(TeleportTarget, CheckGround);
		}
		
		if(mallcop < 10)
		{
			Spawn("teleportfog", self.pos);
			A_Stop();
			reactiontime += 16 - mallcop;//we won't attack right away, but we will be more likely to attack if we had to try a lot to find a good spot
			TeleportMove(blart, true, true);
			Spawn("teleportfog", self.pos);
			User_TeleportTimer = 384 + random(0, 70);
			return true;
		}
		bSUMMONEDMONSTER = random(0,1);
		return false;
	}
	Override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if(!User_TeleportTimer)
			User_TeleportTimer = 384 + random(0, 70);
	}
	Override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		if(inflictor is "ExplosiveBarrel" || inflictor is "Rocket" || source is "Archvile"|| source is "BaronOfHell" || mod == "Crush")//some conditions make them try to teleport right away, fighting an archvile ot a baron, getting hit by an explosion, or getting crushed will do it.
			DoTeleport();
		return super.DamageMobj(inflictor, source, damage, mod, flags, angle);
	}
	States
	{
	Spawn:
		CORB A 10 A_Look();
		Loop;
	See:
		CORB A 0	{	bAMBUSH = false;	}
		CORB AAAA 3 A_Chase(NULL, "Missile", CHF_DONTIDLE);
		Loop;
	Missile:
		CORB B 5 A_FaceTarget();
		CORB B 5 BRIGHT A_SpawnProjectile("CacomeraBall");
		Goto See;
	Pain:
		CORB C 3;
		CORB C 3
		{
			A_Pain();
			int t = random(35, 70);
			User_TeleportTimer = t > User_TeleportTimer ? User_TeleportTimer : t;
		}
		CORB C 6;
		Goto See;
	Xdeath:
		TNT1 AA 0 A_SpawnItemEx("skp_BloodMist", 0, 0, 0, random(-2,2), random(-2,2), 5, 0, SXF_USEBLOODCOLOR|SXF_NOCHECKPOSITION|SXF_TRANSFERRENDERSTYLE|SXF_TRANSFERALPHA);
	Death:
		CORB D 8;
		CORB E 8 A_Scream();
		CORB F 8;
		CORB G 8;
		CORB H 0 A_NoBlocking();
		CORB H 8 A_CheckSolidFooting("Death.Land");
		wait;
	Death.Land:
		CORB I -1
		{
			A_SetFloorClip();
			for(int i = 0; i < 3; i++)
			{
				A_SpawnItemEx("Blood",0, 0, 8, random(4,-4), 0, random(0,4), random(0,360), SXF_USEBLOODCOLOR|SXF_NOCHECKPOSITION|SXF_TRANSFERRENDERSTYLE|SXF_TRANSFERALPHA);
			}
		}
		Stop;
	Raise:
		CORB I 8 A_UnSetFloorClip();
		CORB HGFED 8;
		Goto See;
	}
	bool CheckTPDest(vector3 TPDest)//this only checks that there is enough room in the space for the thing to spawn, it does not check if there are actors in the way
	{
		double TPSpace;
		if(level.IsPointInLevel(TPDest))
		{
			sector TPsec = level.PointInSector(TPDest.XY);
			double flr, cel;
			sector flrsec, celsec;
			[flr, flrsec/*, 3dflr*/] = TPsec.NextHighestCeilingAt(TPDest.X, TPDest.Y,TPDest.Z, TPDest.Z + self.height);
			[cel, celsec/*, 3dcel*/] = TPsec.NextLowestFloorAt(TPDest.X, TPDest.Y,TPDest.Z, TPDest.Z + self.height);
			TPSpace = abs(flr - cel);
		}
		if(TPSpace >= self.height)
			return true;
		return false;
	}
	bool, vector3 GetTPDest(actor TeleportTarget, bool CheckGround = false)
	{
		if(!TeleportTarget)
			return false, (0,0,0);
		vector3 SpawnPos = TeleportTarget.pos;
		if(CheckGround && TeleportTarget.bFLOAT && TeleportTarget.bNOGRAVITY)//if the target is flying check at their floor instead of where they are currently
		{
			sector TPsec = level.PointInSector(SpawnPos.XY);
			double flr;
			sector flrsec;
			[flr, flrsec] = TPsec.NextLowestFloorAt(SpawnPos.X, SpawnPos.Y, SpawnPos.Z, SpawnPos.Z + TeleportTarget.height);
			SpawnPos.Z = flr;
		}
		let TempCaco = Spawn("Cacomera", SpawnPos);
		if(TempCaco)
		{
			TempCaco.bTHRUACTORS = true;
			//cacodemon inflation!
			//console.printf("%i, %i", TempCaco.radius, TempCaco.height);
			While(TempCaco.A_SetSize(TempCaco.radius + self.radius, -1, true) && TempCaco.radius < 1024)
				continue;
			While(TempCaco.A_SetSize(-1, TempCaco.height + self.radius, true) && TempCaco.height < 1024)
				continue;
			//console.printf("%i, %i", TempCaco.radius, TempCaco.height);
			int minsafe = self.radius + TeleportTarget.radius + 8;
			int maxsafe = TempCaco.radius - self.radius;
			if(TempCaco.radius > minsafe && minsafe < maxsafe)
			{
				vector2 MyCoolVec2 = (minsafe, frandom(minsafe, maxsafe));
				MyCoolVec2 = RotateVector(MyCoolVec2, frandom(0,360));
				vector3 MyCoolVec3 = (TempCaco.Pos.X + MyCoolVec2.X, TempCaco.Pos.Y + MyCoolVec2.Y, TempCaco.Pos.Z + frandom(0, TempCaco.Height - self.height));
				TempCaco.destroy();
				return true, MyCoolVec3;
			}
		}
		TempCaco.destroy();
		return false, (0,0,0);
	}
	state A_CheckSolidFooting(StateLabel label)
	{
		if (abs(pos.z - GetZAt()) <= 1)
			return ResolveState(label);
		bool ok; Actor below;
		[ok, below] = TestMobjZ(true);
		if (below)
			return ResolveState(label);
		return null;
	}
}

class CacomeraBall : skp_ArachnotronPlasma
{
	Default
	{
		Radius 6;
		Height 8;
		Speed 15;
		Decal "CacoScorch";
	}
	States
	{
	Death:
		TNT1 A 0
		{
			A_SpawnItemEx("ChainsawSmoke",0,0,-4,0,0,fRandom(1,2),0,0);
			bXFLIP = Random(true, false);
			bYFLIP = Random(true, false);
			DoPart = FALSE;
		}
		CDME A 5 BRIGHT
		{
			if(CallACS("CVarCheck",2))
			{
				A_SetRoll(Random(0,359));
			}
		}
		APBX BCDE 5 BRIGHT
		{
			if(CallACS("CVarCheck",2))
			{
				A_SetRoll(Random(0,359));
			}
		}
		Stop;
	}
}