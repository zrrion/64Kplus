enum ECacomeraExtras
{
	MERA_FOG = -1,
    MERA_HATE = -2,
    MERA_HIDE = -3
}

class Cacomera : Cacodemon
{
	mixin BerserkDroper;
	int TeleportTimer;
	int User_TimerReset;
	Default
	{
		//$title "Cacomera"
		//$Category Monsters
		species "Cacodemon";
		Health 300;
		radius 20;
		Height 56;
		Mass 400;
		Speed 8;
		PainChance 128;
		Monster;
		+FLOAT;
		+NOGRAVITY;
		SeeSound "cacomera/sight";
		PainSound "cacomera/pain";
		DeathSound "cacomera/death";
		ActiveSound "cacomera/active";
		Obituary "%o was killed by a cacomera bite.";
		HitObituary "%o was killed by a cacomera blast.";
		Tag "Cacomera";

		DropItem "TeleportFog", MERA_FOG;
		DropItem "LostSoul", MERA_HATE;
		DropItem "ExplosiveBarrel", MERA_HIDE;
		DropItem "Rocket", MERA_HIDE;
		DropItem "Archvile", MERA_HIDE;
		DropItem "BaronOfHell", MERA_HIDE;
		DropItem "Crush", MERA_HIDE;

		Dropitem "$VEND_CACOMERA", VEND_DESC;
	}
	
	Override void tick()
	{
		super.Tick();
		if(!bAMBUSH && target && !IsFrozen() && self.health > 0)
		{
			int myint = (16 - (2*G_SkillPropertyInt(SKILLP_ACSReturn)));
			if(bSUMMONEDMONSTER && GetAge() % myint == 0)//don't teleport the instant the target can be teleported near
				bSUMMONEDMONSTER = random(0,1);
			if(TeleportTimer < 1 && !bSUMMONEDMONSTER)
				if(!DoTeleport())
					DoFakeTeleport();
			TeleportTimer--;
			if(!CheckSight(target, SF_SEEPASTSHOOTABLELINES|SF_IGNOREWATERBOUNDARY))
				TeleportTimer -= 3;
		}
	}
	bool DoTeleport(actor TeleportTarget = NULL)
	{
		if(!TeleportTarget && !target)
			return false;
		if(!TeleportTarget)
			TeleportTarget = target;
		bool paul;
		vector3 blart;

		DropItem di = self.GetDropItems();
		while(di)
		{
			if(TeleportTarget is di.name && di.Probability == MERA_HATE)
			{
				paul = true;
				blart = TeleportTarget.pos;
				break;
			}
			di = di.next;
		}

		if(!paul)
		{
			[paul, blart] = GetTPDest(TeleportTarget);
		}
		
		if(paul && CheckTPDest(blart))
		{
			SpawnFog();
			A_Stop();
			reactiontime += 8;
			TeleportMove(blart, true, true);
			self.angle = random(0,360);
			SpawnFog();
			TeleportTimer = User_TimerReset + random(0, 70);
			bSUMMONEDMONSTER = random(0,1);
			return true;
		}
		bSUMMONEDMONSTER = false;
		return false;
	}
	void DoFakeTeleport()
	{
		SpawnFog();
		A_Stop();
		reactiontime += 8;
		for(int i = 0; i < 50; i++)//I saw this trick in a movie once
			A_Wander();
		self.angle = random(0,360);
		SpawnFog();
		TeleportTimer = User_TimerReset + random(0, 70);
		bSUMMONEDMONSTER = random(0,1);
	}
	void SpawnFog()
	{
		DropItem di = self.GetDropItems();
		while(di)
		{
			if(di.Probability == MERA_FOG)
				Spawn(di.name, self.pos);
			di = di.next;
		}
	}
	Override void PostBeginPlay()
	{
		if(!User_TimerReset)
			User_TimerReset = 384;
		Super.PostBeginPlay();
		if(!TeleportTimer)
			TeleportTimer = User_TimerReset + random(0, 70);
	}
	Override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		int i = super.DamageMobj(inflictor, source, damage, mod, flags, angle);
		TeleportTimer -= i;

		DropItem di = self.GetDropItems();
		while(di)
		{
			if(inflictor is di.name && di.Probability == MERA_HATE)
			{
				target = inflictor;
				A_Pain();
				break;
			}
			if(((inflictor is di.name || source is di.name) && di.Probability == MERA_HIDE) || mod == "Crush")
			{
				DoTeleport();
				A_Pain();
			}
			di = di.next;
		}
		return i;
	}
	States
	{
	Spawn:
		CORB A 10 A_Look();
		Loop;
	See:
		CORB A 0	{	bAMBUSH = false;	}
		CORB AAAA 3 A_Chase(NULL, "Missile", CHF_DONTIDLE);
		Loop;
	Missile:
		CORB B 0
		{
			DropItem di = self.GetDropItems();
			while(di)
			{
				if(target is di.name && di.Probability == MERA_HATE && DoTeleport())
				{
					SetStateLabel("See");
					break;
				}
				di = di.next;
			}
			TeleportTimer += 20;
		}
		CORB B 5 A_FaceTarget();
		CORB B 5 BRIGHT A_SpawnProjectile("CacomeraBall");
		Goto See;
	Pain:
		CORB C 3;
		CORB C 3
		{
			A_Pain();
			int t = random(35, 70);
			TeleportTimer = t > TeleportTimer ? TeleportTimer : t;
			reactiontime += t;
		}
		CORB C 6;
		Goto See;
	Xdeath:
		TNT1 AA 0 A_SpawnItemEx("skp_BloodMist", 0, 0, self.height * 0.75, random(-2,2), random(-2,2), 5, 0, SXF_USEBLOODCOLOR|SXF_NOCHECKPOSITION|SXF_TRANSFERRENDERSTYLE|SXF_TRANSFERALPHA);
	Death:
		CORB D 8;
		CORB E 8 A_Scream();
		CORB F 8;
		CORB G 8;
		CORB H 0 A_NoBlocking();
		CORB H 8 A_CheckSolidFooting("Death.Land");
		wait;
	Death.Prop:
	Death.Land:
		CORB I -1
		{
			A_SetFloorClip();
			for(int i = 0; i < 3; i++)
			{
				A_SpawnItemEx("Blood",0, 0, 8, random(4,-4), 0, random(0,4), random(0,360), SXF_USEBLOODCOLOR|SXF_NOCHECKPOSITION|SXF_TRANSFERRENDERSTYLE|SXF_TRANSFERALPHA);
			}
		}
		Stop;
	Raise:
		CORB I 8 A_UnSetFloorClip();
		CORB HGFED 8;
		Goto See;
	}
	bool CheckTPDest(vector3 TPDest)//this only checks that there is enough room in the space for the thing to spawn, it does not check if there are actors in the way
	{
		return (level.IsPointInLevel(TPDest) && self.CheckPosition(TPDest.XY));
	}
	bool, vector3 GetTPDest(actor TeleportTarget, int SpawnRad = 512)
	{
		if(!TeleportTarget)
			return false, (0,0,0);
		bool paul;
		FCheckPosition blart;
		vector3 mallcop;
		int i;
		for(i = 0; i < SpawnRad * 2; i++)//the smaller the radius the less we need to attempt since there is less space to fit into
		{
			int radfactor = SpawnRad/self.radius;
			vector2 Dist = (0, self.radius * random(3, radfactor));
			Dist = RotateVector(Dist, random(0, 360));
			mallcop = (TeleportTarget.pos.X + Dist.X, TeleportTarget.pos.Y + Dist.Y, TeleportTarget.pos.Z + self.radius * random(-radfactor, radfactor));

			if(self.CheckPosition(mallcop.XY, false, blart))
			{
				if(mallcop.z < blart.floorz)
					mallcop.z = blart.floorz;
				if(mallcop.z > blart.ceilingz)
					mallcop.z = blart.ceilingz - self.height;
				return true, mallcop;
			}
		}
		return false, (0,0,0);
	}
	state A_CheckSolidFooting(StateLabel label)
	{
		if (abs(pos.z - GetZAt()) <= 1)
			return ResolveState(label);
		bool ok; Actor below;
		[ok, below] = TestMobjZ(true);
		if (below)
			return ResolveState(label);
		return null;
	}
}

class CacomeraCheck : Cacomera//since this is destroyed and not killed we have to use a dummy for checking collision that doesn't count
{
	default
	{
		-COUNTKILL;
	}
}

class CacomeraBall : skp_ArachnotronPlasma
{
	Default
	{
		Radius 6;
		Height 8;
		Speed 15;
		Decal "CacoScorch";
	}
	States
	{
	Death:
		TNT1 A 0
		{
			A_SpawnItemEx("ChainsawSmoke",0,0,-4,0,0,fRandom(1,2),0,0);
			bXFLIP = Random(true, false);
			bYFLIP = Random(true, false);
			DoPart = FALSE;
		}
		CDME A 5 BRIGHT
		{
			if(CallACS("CVarCheck",2))
			{
				A_SetRoll(Random(0,359));
			}
		}
		APBX BCDE 5 BRIGHT
		{
			if(CallACS("CVarCheck",2))
			{
				A_SetRoll(Random(0,359));
			}
		}
		Stop;
	}
}