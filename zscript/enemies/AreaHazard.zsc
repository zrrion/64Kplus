class SKP_AreaHazard : Actor
{
	int OldTime, User_CloseIdle, OpenIdle, FastIdle, PainIdle, PainRadius;
	float User_IntDelay;
	Default
	{
		Health 100;
		Radius 10;
		Height 42;
		+SOLID	+NOBLOOD	+ACTIVATEMCROSS	+DONTGIB	+NOICEDEATH	+OLDRADIUSDMG	+DONTTHRUST
		//+SHOOTABLE
		DeathSound "world/barrelx";
		Obituary "$OB_BARREL";
	}
	override void PostBeginPlay()
	{
		OldTime = level.totaltime; //lets us tell how long it has been idling
		if (User_CloseIdle == 0)
			User_CloseIdle = 140; //amount of time it idles closed
		User_IntDelay %= User_CloseIdle;
		OpenIdle = 2*(User_CloseIdle/3); //amount of time it idles open
		FastIdle = User_CloseIdle/3;  //amount of time winds up for the attack
		PainIdle = User_CloseIdle; //amount of time it attacks
		PainRadius = 96; //radius the attack effects
		Super.PostBeginPlay();
	}
	void A_TimerReset()
	{
		self.OldTime = level.totaltime;
	}
	override void Tick()
	{
		if(isFrozen())
			return;
		if(sprite == GetSpriteIndex("AHOF") &&  Frame > 1)
		{
			if(level.totaltime % 16 == 0)//need to add a fire sound to this, maybe the normal fireball hit sound
			{
				A_Explode(2,PainRadius,XF_NOSPLASH,0,PainRadius/2,0,0,"","Fire");//should be at the same rate as reg nukage
				A_StartSound("imp/shotx",CHAN_AUTO,CHANF_DEFAULT,1);
				for(int i = 0;i < 3; i++)
					A_SpawnItemEx("AH_Flame",random(-5,5),random(-5,5),32+random(-2,2),0,0,frandom(1,1.5));
				A_SpawnItemEx("RocketSmokeTrail",random(-3,-3),random(-3,-3),32+random(-1,1),0,0,frandom(1,1.5));
			}
			for(int i = 0;i < 16; i++)
			{
				A_SpawnItemEx("AH_Flame",random(0,PainRadius),random(-3,-3),random(0,2),0,0,frandom(1,1.5),Random(1,360),0,192);
				A_SpawnItemEx("RocketSmokeTrail",random(0,PainRadius),random(-3,-3),random(1,3),0,0,frandom(2,2.5),Random(1,360),0,250);
			}
		}
		super.Tick();
	}
	override int DoSpecialDamage(Actor victim, int damage, Name damagetype)
	{
		if(victim)
			victim.A_GiveInventory("AHOnFire", 1);
		
		return Super.DoSpecialDamage(victim, damage, damagetype);
	}
	States
	{
	Spawn:
	Idle.Close:
		TNT1 A 0 A_TimerReset();
	Idle.Close.Anim:
		AHCI CD 5;
		AHCI D 0
		{
			if(abs(OldTime - level.totaltime) >= (User_CloseIdle * User_IntDelay))
			{
				User_IntDelay = 1;//after the initial go this can be set to 0 and ignored
				return ResolveState("Open"); 
			}
			return ResolveState(null); 
		}
		AHCI AB 5;
		Loop;
	Idle.Open:
		TNT1 A 0
		{
			A_TimerReset();
			A_StartSound("hazard/idle",CHAN_BODY,CHANF_LOOP|CHANF_OVERLAP,1,ATTN_NORM,0.75);
		}
	Idle.Open.Anim:
		AHOI A 3;
		AHOI A 0
		{
			if(abs(OldTime - level.totaltime) >= OpenIdle)
				return ResolveState("Accelerate"); 
			return ResolveState(null); 
		}
		AHOI BCD 2;
		Loop;
	Idle.Fast:
		TNT1 A 0 A_TimerReset();
	Idle.Fast.Anim:
		AHOF AB 1 Bright;
		AHOI D 0
		{
			if(abs(OldTime - level.totaltime) >= FastIdle)
				return ResolveState("Idle.Pain"); 
			return ResolveState(null); 
		}
		Loop;
	Idle.Pain:
		TNT1 A 0
		{
			A_TimerReset();
			A_StartSound("hazard/hurt",CHAN_BODY,CHANF_LOOP,1,ATTN_NORM);
		}
	Idle.Pain.Anim:
		AHOF CD 1 Bright;//Here we will do a damage thing
		AHOF D 0
		{
			if(abs(OldTime - level.totaltime) >= PainIdle)
				return ResolveState("Close"); 
			return ResolveState(null); 
		}
		Loop;
	Open:
		AHCO ABC 6;
		AHCO D 5 A_StartSound("hazard/start",CHAN_BODY,0,1,ATTN_NORM,0.75);
		AHCO E 4;
		AHCO F 3;
		Goto Idle.Open;
	Close:
		TNT1 A 0 A_StartSound("hazard/Stop",CHAN_BODY,0,1,ATTN_NORM,0.75);
		AHOF AB 2;
		AHOI B 3;
		AHOI CCDDDAAAABBBB 2;
		AHOC A 3;
		AHOC B 4;
		AHOC CDE 5; //needs a quiet steam hiss
		AHOC FG 6;
		Goto Idle.Close;
	Accelerate:
		AHOF A 3 A_StartSound("hazard/idle",CHAN_BODY,CHANF_LOOP,1,ATTN_NORM,0.78);
		AHOF B 3 A_StartSound("hazard/idle",CHAN_BODY,CHANF_LOOP,1,ATTN_NORM,0.81);
		AHOF A 3 A_StartSound("hazard/idle",CHAN_BODY,CHANF_LOOP,1,ATTN_NORM,0.84);
		AHOF B 2 A_StartSound("hazard/idle",CHAN_BODY,CHANF_LOOP,1,ATTN_NORM,0.87);
		AHOF A 2 A_StartSound("hazard/idle",CHAN_BODY,CHANF_LOOP,1,ATTN_NORM,0.9);
		AHOF B 2 A_StartSound("hazard/idle",CHAN_BODY,CHANF_LOOP,1,ATTN_NORM,0.95);
		Goto Idle.Fast;
	Death:
		BEXP A 5 BRIGHT;
		BEXP B 5 BRIGHT A_Scream;
		BEXP C 5 BRIGHT;
		BEXP D 5 BRIGHT;
		BEXP E 10 BRIGHT;
		TNT1 A 1050 BRIGHT A_BarrelDestroy;
		TNT1 A 5 A_Respawn;
		Wait;
	}
}
class AH_Flame : Actor
{
	default
	{
		+BRIGHT
		+NOGRAVITY	+NOINTERACTION +NOBLOCKMAP	+DONTSPLASH
	}
	override void PostBeginPlay()
	{
		bSPRITEFLIP = Random(TRUE,FALSE);
	}
	states
	{
		Spawn:
			AHFR ABCDEFGH 6 
			{
				if(frame <= 1 && random(0,1) == 0)
					A_SetTics(0);
				else
				A_SetTics(random(2,4));
			}
			Stop;
	}
}

class AH_SmallFlame : AH_Flame
{
	states
	{
		Spawn:
			AHFR CDEFGH 6 
			{
				if(frame <= 4 && random(0,1) == 0)
					A_SetTics(0);
				else
				A_SetTics(random(2,4));
			}
			Stop;
	}
}

class AHOnFire : StatusEffectParticles
{
	Default
	{
		DropItem "AH_SmallFlame", -128, -8;
		DropItem "RocketSmokeTrail", -128, -1;
	}
}