mixin class SurfaceFinder
{
	sector S;
	vector3 ShootAtSector(bool floor, int flatheight)
	{
		vector3 H;
		flinetracedata L;
		let P = LineAttack(0, 32768, floor ? 90 : -90, 0, 'none', null, LAF_NORANDOMPUFFZ|LAF_NOIMPACTDECAL|LAF_NOINTERACT|LAF_OVERRIDEZ, NULL, height/2);
		if(P)
		{
			P.destroy();
			S = P.Cursector;
			H = P.Pos;
			H += (0,0, (floor ? -1 : +1) * (P.height)/4);
		}
		else
		{
			S = self.Cursector;
			H = (self.pos.X, self.pos.Y, flatheight);
		}
		H += (0,0, (floor ? 1 : -1) * self.height);
		return H;
	}
	vector3 TraceAtSector(bool floor, int flatheight)
	{
		vector3 H;
		flinetracedata L;
		LineTrace (0, 32768, floor ? 90 : -90, TRF_THRUACTORS|TRF_THRUHITSCAN|TRF_THRUBLOCK, height/2, data:L);
		if(L.HitType != TRACE_HitNone)
		{
			S = L.Hit3DFloor ? L.Hit3DFloor.model : L.HitSector;
			H = L.HitLocation;
		}
		else
		{
			S = self.Cursector;
			H = (self.pos.X, self.pos.Y, flatheight);
		}
		H += (0,0, (floor ? 1 : -1) * self.height);
		return H;
	}


	vector3 GetCeilingPos()
	{
		return ShootAtSector(false, cursector.CenterCeiling());
	}
	vector3 GetFloorPos()
	{
		return ShootAtSector(true, cursector.CenterFloor());
	}
}

class skp_Keen : CommanderKeen replaces CommanderKeen
{
	mixin SurfaceFinder;
	Default
	{
		Health 100;
		Radius 16;
		Height 54;
		Mass 10;
		PainChance 256;
		+SOLID
		-SPAWNCEILING
		+NOGRAVITY
		+SHOOTABLE
		+COUNTKILL
		+NOICEDEATH
		-ISMONSTER
		+NOBLOOD
		+DONTFALL
		+DONTTHRUST
		+MOVEWITHSECTOR
		PainSound "keen/pain";
		DeathSound "keen/death";
	}
	States
	{
	Spawn:
		KEEN A -1;
		Loop;
	Pain:
		KEEN B	4;
		KEEN B	8 A_Pain();
		Goto Spawn;
	Death:
		TNT1 A 0
		{
			A_SpawnItemEx("FreeKeen",0,0,8);
			bSOLID = false;
		}
		KEEN CD	6;
		KEEN E 6 A_Scream();
		KEEN FG 6;
		KEEN GGGGG 6;
		KEEN G 6 A_KeenDie();
		KEEN G -1;
		Stop;
	}
	Override void PostBeginPlay()
	{	
		self.SetOrigin(GetCeilingPos(), FALSE);
		super.PostBeginPlay();
	}
	Override void Tick()
	{
		if(!getAge() || S.PlaneMoving(1))
			self.SetOrigin(GetCeilingPos(), TRUE);
		super.Tick();
	}
}

class skp_HellKeen : skp_Keen
{
	Default
	{
		-NOBLOOD
		Bloodcolor "329E32";
		PainSound "keen/pain";
		DeathSound "keen/death";
	}
	States
	{
	Spawn:
		KEN2 AABCB 8;
		Loop;
	Pain:
		KEN2 D	4;
		KEN2 D	8 A_Pain();
		Goto Spawn;
	Death:
		TNT1 A 0
		{
			A_SpawnItemEx("FreeHellKeen",0,0,16);
			bSOLID = false;
		}
		KEEN CD	6;
		KEEN E 6 A_Scream();
		KEEN FG 6;
		KEEN GGGGG 6;
		KEEN G 6 A_CallSpecial(special, args[0], args[1], args[2], args[3], args[4]);//this is meant for a more general use, and as such is really designed for use with whatever, instead of the one thing that A_KeenDie does
		KEEN G -1;
		Stop;
	}
}

class FreeKeen : DemonChunk//ignore that keen is a gib, just rember reading is important
{
	Default
	{
		+SKYEXPLODE//he'll be fine
		+MOVEWITHSECTOR
		radius 4;
		gravity 0.125;
	}
	States
	{
		Spawn:
			KEEN H 1 A_CheckFloor("Death");
			Loop;
		Death:
			KEEN IJK 6;
			KEEN L -1;
			Stop;
	}
}

class FreeHellKeen : FreeKeen
{
	Default
	{
		Bloodcolor "00 A0 00";
		gravity 0.25;
	}
	States
	{
		Spawn:
			KEN2 E 1 A_CheckFloor("Death");
			Loop;
		Death:
			KEN2 F -1
			{
				for(int i = 0; i < 3; i++)
				{
					A_SpawnItemEx("Blood",0, 0, 8, random(4,-4), 0, random(0,4), random(0,360), SXF_USEBLOODCOLOR|SXF_NOCHECKPOSITION|SXF_TRANSFERRENDERSTYLE|SXF_TRANSFERALPHA);
				}
			}
			Stop;
	}
}