class UnloadedClamBlade : UnloadedWeapon
{
	default
	{
		Obituary "Unloaded a calamity blade.";
	}
}

class skp_HeatBlade : skp_Weapon
{
	Default
	{
		//$Category Weapons
		Weapon.Slotnumber 7;
		
		Weapon.SelectionOrder 100;
		Weapon.AmmoUse 10;
		Weapon.AmmoGive 100;
		Weapon.AmmoType "Cell";
		+WEAPON.NOAUTOFIRE;
		Obituary "%o was unmade by %k.";
		Inventory.Pickupmessage "Clam Time B)";
		Tag "Calamity Blade";
		DropItem "UnloadedClamBlade";
	}
	action void A_FireHeatWave(double charge = 1)
	{
		A_StartSound("clam/fire", CHAN_WEAPON);
		double WavePitch = BulletSlope();//autoaims the full blade all at once
		for(double ang = -charge; ang <= charge; ang += 5.0)
			A_FireProjectile("skp_HeatWaveRipper", ang, false, 0, 0, FPF_NOAUTOAIM, DeltaAngle(pitch, WavePitch));
		
	}
	action void A_ClamFlash(statelabel flash = null)
	{
		invoker.DepleteAmmo(false);
		A_GunFlash(flash);
	}
	action void A_RefireHeatWave(statelabel flash = null)
	{
		if(invoker.Ammo1.amount >= invoker.AmmoUse1)
			A_Refire(flash);
	}
	States
	{
	Ready:
		CLAM A 1 skp_WeaponReady();
		Loop;
	Deselect:
		CLAM A 1 skp_Lower;
		Wait;
	Select:
		CLAM A 1 skp_Raise;
		Wait;
	Fire:
		CLAM A 1
		{
			A_OverlayScale(PSP_WEAPON, 1.0);
			A_WeaponOffset(0, 32);
		}
	Fire1:
		TNT1 A 0 A_ClamFlash("ClamTime1");
		CLAM A 6 Bright;
		CLAM AAA 5 Bright;
		TNT1 A 0 A_RefireHeatWave("Fire2");
		TNT1 A 0 A_FireHeatWave(5);
		Goto FireForReal;
	Fire2:
		TNT1 A 0 A_ClamFlash("ClamTime2");
		CLAM A 6 Bright;
		CLAM AAA 5 Bright;
		TNT1 A 0 A_RefireHeatWave("Fire3");
		TNT1 A 0 A_FireHeatWave(12.5);
		Goto FireForReal;
	Fire3:
		TNT1 A 0 A_ClamFlash("ClamTime3");
		CLAM A 6 Bright;
		CLAM AAA 5 Bright;
		TNT1 A 0 A_RefireHeatWave("Fire4");
		TNT1 A 0 A_FireHeatWave(20);
		Goto FireForReal;
	Fire4:
		TNT1 A 0 A_ClamFlash("ClamTime4");
		CLAM A 6 Bright;
		CLAM AAA 5 Bright;
		TNT1 A 0 A_RefireHeatWave("Fire5");
		TNT1 A 0 A_FireHeatWave(27.5);
		Goto FireForReal;
	Fire5:
		TNT1 A 0 A_ClamFlash("ClamTime5");
		CLAM A 6 Bright;
		CLAM AAA 5 Bright;
		TNT1 A 0 A_FireHeatWave(35);
	FireForReal:
		CLAM BCD 4 Bright;
		CLAM E 5;
		CLAM F 4;
		CLAM G 3 A_RefireHeatWave("Fire");
		CLAM A 3 Offset(0, 36) A_RefireHeatWave("Fire");
		CLAM A 3 Offset(0, 34) A_RefireHeatWave("Fire");
		TNT1 A 0 A_CheckReload();
		Goto Ready;
	ClamTime1:
		TNT1 A 0 A_StartSound("clam/charge", CHAN_WEAPON);
		CBF1 A 6 Bright;
		CBF1 BCD 5 Bright;
		Stop;
	ClamTime2:
		TNT1 A 0 A_StartSound("clam/charge", CHAN_WEAPON);
		CBF2 A 6 Bright;
		CBF2 BCD 5 Bright;
		Stop;
	ClamTime3:
		TNT1 A 0 A_StartSound("clam/charge", CHAN_WEAPON);
		CBF3 A 6 Bright;
		CBF3 BCD 5 Bright;
		Stop;
	ClamTime4:
		TNT1 A 0 A_StartSound("clam/charge", CHAN_WEAPON);
		CBF4 A 6 Bright;
		CBF4 BCD 5 Bright;
		Stop;
	ClamTime5:
		TNT1 A 0 A_StartSound("clam/charge", CHAN_WEAPON);
		CBF5 A 6 Bright;
		CBF5 BCD 5 Bright;
		Stop;
 	Spawn:
		CBLD A -1;
		Stop;
	}
}

class skp_HeatWaveRipper : Actor
{
	Default
	{
		Projectile;
		Damage 10;
		Speed 20;
		Radius 16;
		Height 8;
		+RIPPER;
		+BRIGHT;
		Deathsound "clam/explode";
		DamageType "Fire";//I'll add a fire death state eventually
	}
	Override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		bYFLIP = random(0,1);
	}
	Override bool CanCollideWith(Actor other, bool passive)
	{
		if(other && super.CanCollideWith(other, passive) && !other.bshootable)
			return false;
		return super.CanCollideWith(other, passive);
	}
	override int DoSpecialDamage(Actor victim, int damage, Name damagetype)
	{
		if(victim)
			victim.A_GiveInventory("IncOnFire", 1);
		
		return Super.DoSpecialDamage(victim, damage, damagetype);
	}
	States
	{
	Spawn:
		HETB ABC 2;
		loop;
	Death:
		HETB DEFGHI 3;
		stop;
	}
}