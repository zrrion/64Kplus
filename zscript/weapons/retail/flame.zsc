class UnloadedIncinerator : UnloadedWeapon
{
	default
	{
		Obituary "You emptied the fuel from an incinerator.";
	}
}

class skp_Incinerator  : skp_Weapon
{
	Default
	{
		Weapon.Slotnumber 6;
		Weapon.SelectionOrder 100;
		Weapon.AmmoUse 2;
		Weapon.AmmoGive 50;
		Weapon.AmmoType "Cell";
		Inventory.PickupMessage "You got the incinerator!";
		Tag "Incinerator";
		DropItem "UnloadedIncinerator";
		Dropitem "$vend_flame", VEND_DESC;

		//+WEAPON.POWERED_UP;
		//Weapon.SisterWeapon "skp_PlasmaRifle";
	}
	Override bool TryPickup (in out Actor toucher)
	{
		if(toucher && !LorWeapons && !self.GetAge())
		{
			inventory Inc = inventory(Spawn("skp_PlasmaRifle", self.pos));
			if(Inc)
				Inc.TryPickup(toucher);
			self.destroy();
			return false;
		}
		else
			return super.TryPickup(toucher);
	}
	States
	{
	Ready:
		FLMG A 0 A_StartSound("inc/ignite", CHAN_WEAPON, 0, 0.25, ATTN_STATIC);
	Idle:
		FLMG BBBCCC 1 Bright skp_WeaponReady();
		Loop;
	Deselect:
		FLMG A 1 Bright skp_lower();
		Loop;
	Select:
		FLMG A 1 Bright skp_Raise();
		Loop;
	Fire:
		FLMG A 0
		{
			A_Light(1);
			A_OverlayScale(PSP_WEAPON, 1.0);
			A_WeaponOffset(0, 32);
		}
		FLMF A 2 Bright
		{
			A_Light(2);
			A_IncFire();
		}
		FLMF A 1 Bright
		{
			A_IncFire(false);
			A_Light(1);
		}
		FLMG A 0 A_Refire("FireFrame1");
		FLMG ED 2 Bright A_Light(0);
		Goto Idle;
	Spawn:
		INCN A -1;
		Stop;
	}
	action void A_IncFire(bool Flame = true)
	{
		if(Flame)
		{
			A_StartSound("inc/fire", CHAN_WEAPON);
			A_FireProjectile("skp_IncFlame");
		}
		
		let psp = player.FindPSprite(OverlayID());
		if (psp)
			psp.frame = player.refire % 4;
		
		player.refire++;
	}
}

class skp_IncFlame : Actor
{
	Default
	{
		Projectile;
		Radius 13;
		Height 8;
		Damage 5;
		Speed 40;
		+NOEXTREMEDEATH;
		+FORCERADIUSDMG;
		+BRIGHT;
	}
	States
	{
	Spawn:
		TNT1 A 1;
		IFLM A 2;
		IFLM B 2 A_StartSound("inc/burn");
		IFLM CDEFGH 2
		{
			A_SpawnItemEx("RocketSmokeTrail", random(0,self.radius), random(-3,-3), random(1,3), 0, 0, frandom(2,2.5), frandom(0,360), 0, 128);
			for(int i = 0; i < 4; i++)
				A_SpawnItemEx("IncSmallPart", random(0,self.radius), random(-3,-3), random(1,self.radius), 0, 0, frandom(2,2.5), frandom(0,360), 0, 128);
		}
		stop;
	Death:
		TNT1 A 0
		{
			A_StartSound("DoomRR/IncineratorFlame/death");
			FlameDeath = true;
		}
		IFLM I 2 A_Explode(5, 64);
		IFLM JI 2;
		IFLM J 2 A_Explode(5, 64);
		IFLM KJ 2;
		IFLM K 2 A_Explode(5, 64);
		IFLM L 2;
		IFLM K 2 A_StartSound("Inc/fizzle");
		IFLM L 2 A_Explode(5, 64);
		IFLM ML 2;
		IFLM M 2 A_Explode(5, 64);
		IFLM NM 2;
		IFLM N 2 A_Explode(5, 64);
		IFLM ONO 2;
		IFLM POP 2
		{
			FlameDeath = false;
		}
		stop;
	}
	override void PostBeginPlay()
	{
		bXFLIP = random(0,1);
		super.PostBeginPlay();
	}

	int HeightOffset;
	bool FlameDeath;
	override void Tick()
	{
		if(isFrozen())
			return;
		super.Tick();
		if(!FlameDeath)
			return;
		if(level.totaltime % 2 == 0)
		{
			HeightOffset += 1;
			for(int i = 0; i < 2; i++)
			{
				A_SpawnItemEx("IncPart", frandom(0,16), 0, frandom(0,32) + HeightOffset, 0, 0, frandom(1,1.5), frandom(0,360), 0, 192);
			}
			A_SpawnItemEx("RocketSmokeTrail", random(0,self.radius), random(-3,-3), random(1,3) + HeightOffset, 0, 0, frandom(2,2.5), frandom(0,360), 0, 128);
		}
	}
	override int DoSpecialDamage(Actor victim, int damage, Name damagetype)
	{
		if(victim)
			victim.A_GiveInventory("IncOnFire", 1);
		
		return Super.DoSpecialDamage(victim, damage, damagetype);
	}
}

class IncPart : AH_Flame
{
	default
	{
		Translation "160:160=209:209", "249:249=211:211", "162:162=214:214", "163:163=218:218", "165:165=222:222", "166:166=234:234", "167:167=38:38";
	}
}

class IncSmallPart : IncPart
{
	states
	{
		Spawn:
			AHFR CDEFGH 6 
			{
				if(frame <= 4 && random(0,1) == 0)
					A_SetTics(0);
				else
				A_SetTics(random(2,4));
			}
			Stop;
	}
}

class StatusEffectParticles : Inventory
{
	int EffectTics;
	bool OnlySmoke;
	property EffectTics : EffectTics;
	Default
	{
		Inventory.MaxAmount 1;
		StatusEffectParticles.EffectTics 25;
		DropItem "IncSmallPart", -128, 1;
		DropItem "RocketSmokeTrail", -128, 8;
	}
	Override void Tick()
	{
		if(!Owner || EffectTics <= 0)
			Destroy();
		
		if(isFrozen())
			return;
		
		EffectTics--;

		if(Owner && Level.totaltime % 4 == 0)
		{
			DropItem di = GetDropItems();
			if(di)
				for(int i = 0; i < -1 * di.Amount; i++)
					Owner.A_SpawnItemEx(di.name, random(Owner.radius / 2, Owner.radius * 1.5), random(-3,-3), random(1,3), 0, 0, frandom(2,2.5), frandom(0,360), 0, -1 * di.Probability);
			if(OnlySmoke || !di.next)
				return;
			
			for(int i = 0; i < -1 * di.next.Amount; i++)
				Owner.A_SpawnItemEx(di.next.name, random(Owner.radius / 2, Owner.radius * 1.5), random(-3,-3), random(Owner.height / 3, Owner.height), 0, 0, frandom(2,2.5), frandom(0,360), 0, -1 * di.next.Probability);
		}		
	}
	override bool HandlePickup(Inventory item)
	{
		if(item is "IncOnFire")
		{
			self.EffectTics += 5;
			return true;
		}
		return super.HandlePickup(item);
	}
	Override void OwnerDied()
	{
		self.EffectTics += random(4*35, 10*35);
		OnlySmoke = true;
	}
}

class IncOnFire : StatusEffectParticles
{
	Default
	{
		DropItem "IncSmallPart", -128, -8;
		DropItem "RocketSmokeTrail", -128, -1;
	}
}