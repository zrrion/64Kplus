class skp_Weapon : Weapon
{
	String PickupMsg;
	String PickupOpenMsg;
	property PickupMsg: PickupMsg;
	property PickupOpenMsg: PickupOpenMsg;
	
	Class<Ammo> AmmoType;
	property AmmoType: AmmoType;
	
	int AmmoAmount;
	property AmmoAmount: AmmoAmount;
	
	int AmountHolder;
	int ReadySprite;
	Default
	{
	
		skp_Weapon.PickupMsg "Picked up a weapon.";//pickup message for when you need all the ammo in the weapon
		skp_Weapon.PickupOpenMsg "Unloaded a weapon.";//pickup message for when you need some of the ammo in the weapon
		skp_Weapon.AmmoType "Clip";//ammo to drop when unloaded
		skp_Weapon.AmmoAmount 0;//how many you get
		Weapon.Kickback 100;
		
		Weapon.AmmoUse2 1;
		Weapon.AmmoGive2 0;
		Weapon.AmmoType2 "SKP_SawFuel";
		+Weapon.ALT_USES_BOTH;
	}
	
	States
	{
		Select:
		Deselect:
		Ready:
			"####" "#" 1 skp_WeaponReady();
			Loop;
		Fire:
		AltFire:
		Fire.Punch:
			"####" "#" 1 A_OverlayOffset(1,-8,8,WOF_ADD);
			"####" "#" 1 A_OverlayOffset(1,-24,24,WOF_ADD);
		AltHold:
			HAND B 1
				{
					A_OverlayOffset(1,0,32);
					A_StartSound("skeleton/swing", CHAN_AUTO, CHANF_DEFAULT, 0.2, ATTN_NORM, 0.8);
				}
			HAND C 1;
			HAND D 1 A_CustomPunch((CountInv("PowerStrength") >= 1 ? 20 : 2) * random(1, 10), TRUE, CPF_NOTURN, CountInv("PowerStrength") >= 1 ? "skp_FistPuff_XDeath" : "skp_FistPuff");
			HAND D 1 A_OverlayOffset(1,-50, 36);
			HAND D 1 A_OverlayOffset(1,-90, 46);
			HAND D 1 A_OverlayOffset(1,-140, 50);
			HAND D 1 A_OverlayOffset(1,-180, 53);
			HAND D 1 A_OverlayOffset(1,-210, 59);
			HAND D 1 A_OverlayOffset(1,-240, 70);
			TNT1 A 8;
			TNT1 A 0 ResolveState("Fire.Refire");
		Fire.Refire:
			TNT1 A 1 A_Refire("AltHold");
			TNT1 A 0 ResolveState("Altfire.Return");
		Altfire.Return:
			"####" "#" 0
			{
				Players[consoleplayer].psprites.sprite = invoker.ReadySprite;
				A_OverlayOffset(1,-48,32+48);
			}
			"####" "###" 1 A_WeaponOffset(16,-16,WOF_ADD);
			TNT1 A 0 ResolveState("Ready");
			Goto Ready;
		//Chainsaw stuff here:
		Saw.Idle:
			TNT1 AA 2 A_SpawnItemEx("ChainsawSmoke",2,fRandom(2,6),(height/2)-2,0,fRandom(1,3),fRandom(-2,0));
			TNT1 A 2
				{
					A_StartSound("weapons/sawidle",CHAN_5);
					A_SpawnItemEx("ChainsawSmoke",2,fRandom(2,6),(height/2)-2,0,fRandom(1,3),fRandom(-2,0));
				}
			Loop;
		Saw.Idle.End:
			TNT1 A 0;
			Stop;
		User1:
			"####" "#" 1
			{
				invoker.bAltFire = TRUE;
				A_OverlayOffset(1,-16,16,WOF_ADD);
				if(Players[consoleplayer].psprites.sprite != GetSpriteIndex("TNT1"))//we only want to update this if it gets called when there is actually a sprite
				{
					invoker.ReadySprite = Players[consoleplayer].psprites.sprite;//so we can refer to it again when we quit swinging
				}
			}
			"####" "###" 1 A_OverlayOffset(1,-16,16,WOF_ADD);
		User1.Hold:
			TNT1 A 4
			{
				A_OverlayRotate(PSP_WEAPON, 0);
				A_OverlayScale(PSP_WEAPON, 1);
				A_AlertMonsters();//need to do this manually since User1 doesn't alert by default
				A_OverlayOffset(1,0,32);
			}
			SAWD GGHH 1
				{
					A_OverlayOffset(1,-16,0,WOF_ADD);
					A_SpawnItemEx("ChainsawSmoke",2,fRandom(2,6),(height/2)-2,0,fRandom(1,3),fRandom(-2,0));
				}
			SAWD I 1
				{
					A_Overlay(666,"Saw.Idle.End");
					A_Saw("weapons/sawfull","weapons/sawhit",40,"ChainsawZerkPuff",SF_NORANDOM|SF_NOUSEAMMOMISS,65,2.8125,0,0.25);
					A_SpawnItemEx("ChainsawSmoke",2,fRandom(2,6),(height/2)-2,0,fRandom(1,3),fRandom(-2,0));
				}
			SAWD IIII 1 
				{
					A_Saw("","",40,"ChainsawZerkPuff",SF_NORANDOM|SF_NOUSEAMMO);
					A_OverlayOffset(1,-32,16,WOF_ADD);
					A_SpawnItemEx("ChainsawSmoke",2,fRandom(2,6),(height/2)-2,0,fRandom(1,3),fRandom(-2,0));
				}
			SAWD III 1 
				{
					A_OverlayOffset(1,-32,16,WOF_ADD);
					A_SpawnItemEx("ChainsawSmoke",2,fRandom(2,6),(height/2)-2,0,fRandom(1,3),fRandom(-2,0));
				}
			TNT1 A 4 A_OverlayOffset(1,0,32);
			TNT1 A 12 A_Overlay(666,"Saw.Idle");
			TNT1 A 0 ResolveState("User1.Refire");
		User1.Refire:
			"####" "#" 0 skp_SawQuickFire("User1",BT_USER1);
			TNT1 A 0 ResolveState("User1.Return");
		User1.Return:
			"####" "#" 0
			{
				A_Overlay(666,"Saw.Idle.End");
				Players[consoleplayer].psprites.sprite = invoker.ReadySprite;
				A_OverlayOffset(1,-48,32+48);
			}
			"####" "######" 1 A_WeaponOffset(8,-8,WOF_ADD);
			TNT1 A 0 ResolveState("Ready");
			Goto Ready;
		FlameBelch:
			FLMB A 1;
			FLMB A 1 A_OverlayOffset(-2,0,32);
			FLMB A 1 A_OverlayOffset(-2,32,32);
			FLMB A 16;
			FLMB A 1 A_OverlayOffset(-2,16,32);
			FLMB A 1 A_OverlayOffset(-2,0,32);
			FLMB A 1 A_OverlayOffset(-2,-16,32);
			FLMB A 1 A_OverlayOffset(-2,-32,32);
			TNT1 A 35;
			Stop;
			
	}
	Action void skp_Raise()
	{
		if(CountInv("skp_chainsaw") > 0)
			A_SetInventory("skp_fist",0);//if you have the chainsaw then you don't need the fist
		player.WeaponState &= WF_WEAPONBOBBING;
		invoker.bALT_AMMO_OPTIONAL = TRUE;//this is true for how ammo is used, but not for how selection is determined so we set it here instead of as a default
		invoker.bALT_USES_BOTH = FALSE;//this is true for how selection is determined, but not for how ammo is used so we clear it here
		A_Raise(6*3);//the default speed it 6, presented as 6*x to be clear about selection speed vs the default
	}
	Action void skp_Lower()
	{
		let YerGun = player.FindPSprite(-2);
		if(!YerGun && player.ReadyWeapon)
		{
			player.WeaponState &= WF_WEAPONBOBBING;
			invoker.bALT_AMMO_OPTIONAL = FALSE;//reset to default
			invoker.bALT_USES_BOTH = TRUE;//reset to default
			A_Overlay(666,"Saw.Idle.End");//kill the chainsaw idle overlay that handles the chainsaw smoke and sound
			A_Lower(6*5);
		}
	}
	Action void skp_WeaponReady(int flags = 0, bool NoSaw = false, bool NoScale = false)//lets me use the alternate functions if they exist on the weapon
	{
		if(Players[consoleplayer].psprites.sprite != GetSpriteIndex("TNT1"))
		{
			invoker.ReadySprite = Players[consoleplayer].psprites.sprite;
		}
		flags |= WRF_NOBOB|WRF_ALLOWUSER2|WRF_ALLOWUSER3|WRF_ALLOWUSER4;
		
		if(CountInv("skp_chainsaw") && CountInv("SKP_SawFuel"))
			flags |= WRF_ALLOWUSER1;
			
		A_WeaponReady(flags);
		player.WeaponState |= WF_WEAPONBOBBING;//we are bobbing now
	}
	Action void skp_SawQuickFire(statelabel flash = null, int button = 0)
	{
		if((player.cmd.buttons & button) && CountInv("skp_chainsaw") && CountInv("skp_sawfuel") && player.health > 0)
		{
			player.mo.FireWeapon(ResolveState(flash));

			//player.SetPsprite(PSP_WEAPON, player.ReadyWeapon.FindState(flash));
		}
	}
	Override void PostBeginPlay()
	{
		if(bDROPPED && ACS_ScriptCall("CVarCheck",1))
		{
			bWALLSPRITE = TRUE;
			A_SetAngle(Random(0,360));
		}
	Super.PostBeginPlay();
	}
	Override void Tick()
	{
		self.angle += bWALLSPRITE ? fRandom(3.0,4.0) : 0;
		Super.Tick();
	}
	
	override bool TryPickup (in out Actor toucher)
	{
		/*State ReadyState = FindState('Ready');
		if (ReadyState != NULL && ReadyState.ValidateSpriteFrame())
		{
			let ToucherAmmo = Toucher.FindInventory(self.AmmoType);
			int ToucherAmount = AmmoAmount;
			int ToucherMax = ToucherAmmo ? ToucherAmmo.MaxAmount : GetDefaultByType(self.AmmoType).MaxAmount;
			int ToucherNeed = Abs(ToucherAmount - ToucherMax);
			int AdjustedAmount = bIgnoreSkill ? self.AmmoAmount : self.AmmoAmount*G_SkillPropertyFloat(SKILLP_AmmoFactor);
			int OpenAmount = (AdjustedAmount % ToucherAmount == 0) ? ToucherAmount : AdjustedAmount % ToucherAmount;
			
			
			if(AdjustedAmount + ToucherAmount <= ToucherMax)//this checks to see if we can pick up the entire thing
			{
				return Super.TryPickup(Toucher);//if it is valid for pickup call the OG funtion, it is less strict so it should always pick up something if it gets called
			}
			else if(ToucherAmount < ToucherMax)//do we need ammo at all
			{
				PickupMsg = self.PickupOpenMsg;//we are opening the box
				Toucher.A_GiveInventory(self.AmmoType,ToucherNeed);
				AmountHolder = ToucherNeed;
				ToucherAmount -= ToucherNeed;//remove the amount of the spawned pickup from the amount
				int SmallPickupAmount = GetDefaultByType(self.AmmoType).Amount;
				
				While(ToucherAmount >= SmallPickupAmount)//so long as we have enough for a full pickup drop a full pickup
				{
					A_DropItem(self.AmmoType, SmallPickupAmount);//drop a pickup with the normal amount
					ToucherAmount -= SmallPickupAmount;//remove that amount from the total
				}
				if(ToucherAmount > 0)//if we get here and still have amount it means we have less than a full smal pickup so we just drop a partial
				{
					A_DropItem(self.AmmoType, ToucherAmount);
					ToucherAmount *= 0;
					//self.AmmoGive *= 0;
					AmmoGive1 *= 0;
					AmmoGive2 *= 0;
				}
				self.bALWAYSPICKUP = true;
				return Super.TryPickup(Toucher);
			}
		}
		return false;*/
		return Super.TryPickup(Toucher);
	}
	
	/*Override String PickupMessage ()
	{
		if(amount > 0)
			return string.Format("%s", StringTable.Localize(self.PickupMsg));
		else if(AmountHolder > 0)
			return string.Format("%s", StringTable.Localize(self.PickupMsg));
		else
			return self.PickupMsg;
	}*/
}

Class skp_BulletPuff : BulletPuff replaces BulletPuff
{
	Default
	{
		+ROLLSPRITE
		+ROLLCENTER
		+FORCEXYBILLBOARD
		-RANDOMIZE
		Decal "BulletChip";
	}
	Override Void PostBeginPlay()
	{
		if(ACS_ScriptCall("CVarCheck",2))
			A_SetRoll(Random(0,359));
		A_SetScale(frandom(0.9,1.1));
		Super.PostBeginPlay();
	}
	Override Void Tick()
	{
		//if(alpha >= 0.5)
			//A_SetRoll(Random(0,359));
		Super.Tick();
	}
	States
	{
	Spawn:
		PUFF A 4 Bright;
		PUFF B 4;
	Melee:
		PUFF CDEF 4
			{
				A_SetRenderStyle(0.5,STYLE_Translucent);
			}
		PUFF F 1 
			{
				A_SetScale(Scale.X+0.012);
				A_Fadeout(0.05);
			}
		Wait;
	}
}

class skp_RocketSmokeTrail : RocketSmokeTrail replaces RocketSmokeTrail
{
	Default
	{
		+ROLLSPRITE
		+ROLLCENTER
		+FORCEXYBILLBOARD
		VSpeed 0;
	}
	Override void PostBeginPlay()
	{
		if(CallACS("CVarCheck",3) <= 1)
			ResolveState("Death");
		else if(CallACS("CVarCheck",2))
			A_SetRoll(Random(0,359));
		super.PostBeginPlay();
	}
	States
	{
	Spawn:
		RSMK ABCD 5;
		RSMK E 1 A_Fadeout();
		Wait;
	Death:
		TNT1 A 0;
		Stop;
	}
}