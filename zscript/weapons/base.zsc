class skp_Weapon : Weapon
{
	int AmountHolder;
	int ReadySprite;
	bool SawHasHit;
	Default
	{
		Weapon.Kickback 100;
		+Weapon.ALT_USES_BOTH;
		//Weapon.AmmoUse2 1;
		//Weapon.AmmoGive2 0;
		//Weapon.AmmoType2 "SKP_SawFuel";
	}
	
	States
	{
		Select:
		Deselect:
		Ready:
			"####" "#" 1 skp_WeaponReady();
			Loop;
		Fire:
		AltFire:
		Fire.Punch:
			"####" "#" 1 A_OverlayOffset(1,-8,8,WOF_ADD);
			"####" "#" 1 A_OverlayOffset(1,-24,24,WOF_ADD);
		AltHold:
			HAND B 1
				{
					A_OverlayOffset(1,0,32);
					A_StartSound("skeleton/swing", CHAN_AUTO, CHANF_DEFAULT, 0.2, ATTN_NORM, 0.8);
				}
			HAND C 1;
			HAND D 1 SKP_Punch();
			HAND D 1
			{
				A_OverlayOffset(1,-50, 36);
				let pspr = player.FindPSprite(1);
				if(pspr && invoker.NextTics)
				{
					pspr.Tics = invoker.NextTics;
					invoker.NextTics = 0;
				}
			}
			HAND D 1 A_OverlayOffset(1,-90, 46);
			HAND D 1 A_OverlayOffset(1,-140, 50);
			HAND D 1 A_OverlayOffset(1,-180, 53);
			HAND D 1 A_OverlayOffset(1,-210, 59);
			HAND D 1 A_OverlayOffset(1,-240, 70);
			TNT1 A 8;
			TNT1 A 0 ResolveState("Fire.Refire");
		Fire.Refire:
			TNT1 A 1 A_Refire("AltHold");
			TNT1 A 0 ResolveState("Altfire.Return");
		Altfire.Return:
			"####" "#" 0
			{
				Players[consoleplayer].psprites.sprite = invoker.ReadySprite;
				A_OverlayOffset(1,-48,32+48);
			}
			"####" "###" 1 A_WeaponOffset(16,-16,WOF_ADD);
			TNT1 A 0 ResolveState("Ready");
			Goto Ready;
		//Chainsaw stuff here:
		Saw.Idle:
			TNT1 AA 2 A_SpawnItemEx("ChainsawSmoke",2,fRandom(2,6),(height/2)-2,0,fRandom(1,3),fRandom(-2,0));
			TNT1 A 2
				{
					A_StartSound("weapons/sawidle",CHAN_5);
					A_SpawnItemEx("ChainsawSmoke",2,fRandom(2,6),(height/2)-2,0,fRandom(1,3),fRandom(-2,0));
				}
			Loop;
		Saw.Idle.End:
			TNT1 A 0;
			Stop;
		User1:
			"####" "#" 1
			{
				invoker.bAltFire = TRUE;
				A_OverlayOffset(1,-16,16,WOF_ADD);
				if(Players[consoleplayer].psprites.sprite != GetSpriteIndex("TNT1"))//we only want to update this if it gets called when there is actually a sprite
				{
					invoker.ReadySprite = Players[consoleplayer].psprites.sprite;//so we can refer to it again when we quit swinging
				}
			}
			"####" "###" 1 A_OverlayOffset(1,-16,16,WOF_ADD);
		User1.Hold:
			TNT1 A 4
			{
				A_OverlayRotate(PSP_WEAPON, 0);
				A_OverlayScale(PSP_WEAPON, 1);
				A_AlertMonsters();//need to do this manually since User1 doesn't alert by default
				A_OverlayOffset(1,0,32);
			}
			SAWD GGHH 1
				{
					A_OverlayOffset(1,-16,0,WOF_ADD);
					A_SpawnItemEx("ChainsawSmoke",2,fRandom(2,6),(height/2)-2,0,fRandom(1,3),fRandom(-2,0));
				}
			SAWD I 1
				{
					A_Overlay(666,"Saw.Idle.End");
					if(SKP_Saw("weapons/sawfull","weapons/sawhit",40,"ChainsawZerkPuff",SF_NORANDOM,65,2.8125,0,0.25) && !invoker.SawHasHit)
					{
						if(!sv_infiniteammo)
							A_TakeInventory("SKP_SawFuel", 1);
						invoker.SawHasHit = TRUE;
					}
					A_SpawnItemEx("ChainsawSmoke",2,fRandom(2,6),(height/2)-2,0,fRandom(1,3),fRandom(-2,0));
				}
			SAWD IIII 1 
				{
					if(SKP_Saw("","weapons/sawhit",40,"ChainsawZerkPuff",SF_NORANDOM,65,2.8125,0,0.25) && !invoker.SawHasHit)
					{
						if(!sv_infiniteammo)
							A_TakeInventory("SKP_SawFuel", 1);
						invoker.SawHasHit = TRUE;
					}
					A_OverlayOffset(1,-32,16,WOF_ADD);
					A_SpawnItemEx("ChainsawSmoke",2,fRandom(2,6),(height/2)-2,0,fRandom(1,3),fRandom(-2,0));
				}
			SAWD III 1 
				{
					invoker.SawHasHit = FALSE;
					A_OverlayOffset(1,-32,16,WOF_ADD);
					A_SpawnItemEx("ChainsawSmoke",2,fRandom(2,6),(height/2)-2,0,fRandom(1,3),fRandom(-2,0));
				}
			TNT1 A 4 A_OverlayOffset(1,0,32);
			TNT1 A 12 A_Overlay(666,"Saw.Idle");
			TNT1 A 0 ResolveState("User1.Refire");
		User1.Refire:
			"####" "#" 0 skp_SawQuickFire("User1",BT_USER1);
			TNT1 A 0 ResolveState("User1.Return");
		User1.Return:
			"####" "#" 0
			{
				A_Overlay(666,"Saw.Idle.End");
				Players[consoleplayer].psprites.sprite = invoker.ReadySprite;
				A_OverlayOffset(1,-48,32+48);
			}
			"####" "######" 1 A_WeaponOffset(8,-8,WOF_ADD);
			TNT1 A 0 ResolveState("Ready");
			Goto Ready;
		FlameBelch:
			FLMB A 1;
			FLMB A 1 A_OverlayOffset(-2,0,32);
			FLMB A 1 A_OverlayOffset(-2,32,32);
			FLMB A 16;
			FLMB A 1 A_OverlayOffset(-2,16,32);
			FLMB A 1 A_OverlayOffset(-2,0,32);
			FLMB A 1 A_OverlayOffset(-2,-16,32);
			FLMB A 1 A_OverlayOffset(-2,-32,32);
			TNT1 A 35;
			Stop;
			
	}
	Action void skp_Raise()
	{
		if(CountInv("skp_chainsaw") > 0)
			A_SetInventory("skp_fist",0);//if you have the chainsaw then you don't need the fist
		player.WeaponState &= WF_WEAPONBOBBING;
		A_Raise(6*3);//the default speed it 6, presented as 6*x to be clear about selection speed vs the default
	}
	Action void skp_Lower()
	{
		let YerGun = player.FindPSprite(-2);
		if(!YerGun && player.ReadyWeapon)
		{
			player.WeaponState &= WF_WEAPONBOBBING;
			A_Overlay(666,"Saw.Idle.End");//kill the chainsaw idle overlay that handles the chainsaw smoke and sound
			A_Lower(6*5);
		}
	}
	Action void skp_WeaponReady(int flags = 0, bool NoSaw = false, bool NoScale = false)//lets me use the alternate functions if they exist on the weapon
	{
		if(Players[consoleplayer].psprites.sprite != GetSpriteIndex("TNT1"))
		{
			invoker.ReadySprite = Players[consoleplayer].psprites.sprite;
		}
		flags |= WRF_NOBOB|WRF_ALLOWUSER2|WRF_ALLOWUSER3|WRF_ALLOWUSER4;
		
		if(CountInv("skp_chainsaw") && CountInv("SKP_SawFuel"))
			flags |= WRF_ALLOWUSER1;
			
		A_WeaponReady(flags);
		player.WeaponState |= WF_WEAPONBOBBING;//we are bobbing now
	}
	Action void skp_SawQuickFire(statelabel flash = null, int button = 0)
	{
		if((player.cmd.buttons & button) && CountInv("skp_chainsaw") && CountInv("skp_sawfuel") && player.health > 0)
		{
			player.mo.FireWeapon(ResolveState(flash));

			//player.SetPsprite(PSP_WEAPON, player.ReadyWeapon.FindState(flash));
		}
	}
	Action bool SKP_Saw(sound fullsound = "weapons/sawfull", sound hitsound = "weapons/sawhit", int damage = 2, class<Actor> pufftype = "BulletPuff", int flags = 0, double range = 0, double spread_xy = 2.8125, double spread_z = 0, double lifesteal = 0, int lifestealmax = 0, class<BasicArmorBonus> armorbonustype = "ArmorBonus")
	{
		FTranslatedLineTarget t;

		if (!player)
			return false;

		if (!pufftype)
			pufftype = 'BulletPuff';
		if (!damage)
			damage = 2;
		if (!(flags & SF_NORANDOM))
			damage *=  random[Saw](1, 10);
		if (range == 0)
			range = MeleeRange + MELEEDELTA + (1. / 65536.); // MBF21 SAWRANGE;

		double ang = angle + spread_xy * (Random2[Saw]() / 255.);
		double slope = AimLineAttack (ang, range, t) + spread_z * (Random2[Saw]() / 255.);
		Weapon weap = player.ReadyWeapon;

		int puffFlags = (flags & SF_NORANDOMPUFFZ) ? LAF_NORANDOMPUFFZ : 0;

		Actor puff;
		int actualdamage;
		[puff, actualdamage] = LineAttack (ang, range, slope, damage, 'Melee', pufftype, puffFlags, t);

		if (!t.linetarget)
		{
			if ((flags & SF_RANDOMLIGHTMISS) && (Random[Saw]() > 64))
			{
				player.extralight = !player.extralight;
			}
			A_StartSound (fullsound, CHAN_WEAPON);
			return false;
		}
		else
		{
			AdjustPlayerAngle(t);
			let pspr = player.FindPSprite(1);
			if(pspr)
			{
				pspr.Tics = t.linetarget.health <= 0 ? 4 : 2;
			}
		}

		if (flags & SF_RANDOMLIGHTHIT)
		{
			int randVal = Random[Saw]();
			if (randVal < 64)
			{
				player.extralight = 0;
			}
			else if (randVal < 160)
			{
				player.extralight = 1;
			}
			else
			{
				player.extralight = 2;
			}
		}

		if (lifesteal && !t.linetarget.bDontDrain)
		{
			if (flags & SF_STEALARMOR)
			{
				if (armorbonustype == null)
				{
					armorbonustype = "ArmorBonus";
				}
				if (armorbonustype != null)
				{
					BasicArmorBonus armorbonus = BasicArmorBonus(Spawn(armorbonustype));
					armorbonus.SaveAmount = int(armorbonus.SaveAmount * actualdamage * lifesteal);
					armorbonus.MaxSaveAmount = lifestealmax <= 0 ? armorbonus.MaxSaveAmount : lifestealmax;
					armorbonus.bDropped = true;
					armorbonus.ClearCounters();

					if (!armorbonus.CallTryPickup (self))
					{
						armorbonus.Destroy ();
					}
				}
			}

			else
			{
				GiveBody (int(actualdamage * lifesteal), lifestealmax);
			}
		}


		A_StartSound (hitsound, CHAN_WEAPON);
			
		// turn to face target
		if (!(flags & SF_NOTURN))
		{
			double anglediff = deltaangle(angle, t.angleFromSource);

			if (anglediff < 0.0)
			{
				if (anglediff < -4.5)
					angle = t.angleFromSource + 90.0 / 21;
				else
					angle -= 4.5;
			}
			else
			{
				if (anglediff > 4.5)
					angle = t.angleFromSource - 90.0 / 21;
				else
					angle += 4.5;
			}
		}
		if (!(flags & SF_NOPULLIN))
			bJustAttacked = true;

		if(t.linetarget)
			return true;
		return false;
	}
	int NextTics;
	Action void SKP_Punch()
	{
		if (!player)
			return;
		FTranslatedLineTarget t;
		name DamageType = CountInv("PowerStrength") ? "GloryKill" : "Melee";
		name PuffType = CountInv("PowerStrength") ? "skp_FistPuff_XDeath" : "skp_FistPuff";
		int DamageIn = (CountInv("PowerStrength") ? 20 : 2) * random(1, 10);
		for (int i = 0; i < 16; i++)
		{
			for (int j = 1; j >= -1; j -= 2)
			{
				double ang = angle + j*i*(45. / 16);
				double slope = AimLineAttack(ang, 64, t, 0., ALF_CHECK3D);
				if (t.linetarget)
				{
					LineAttack(ang, 64, slope, DamageIn, DamageType, PuffType, true, t);
					if (t.linetarget)
					{
						AdjustPlayerAngle(t);
						j = -666;
						i = 666;
					}
				}
			}
		}
		
		if(!t.linetarget)//if we missed with the arc attack above we need to do another line attack that just shoots forward
		{
			double slope = AimLineAttack (angle, 64, null, 0., ALF_CHECK3D);
			LineAttack (angle, 64, slope, DamageIn, DamageType, PuffType, true, t);
		}

		if(t.linetarget)
		{
			let pspr = player.FindPSprite(1);
			if(pspr)
			{
				pspr.Tics = 4;
				invoker.NextTics = 2;
			}
		}
	}
	Override void PostBeginPlay()
	{
		if(bDROPPED && ACS_ScriptCall("CVarCheck",1))
		{
			bWALLSPRITE = TRUE;
			A_SetAngle(Random(0,360));
		}
		Super.PostBeginPlay();
	}
	Override void Tick()
	{
		self.angle += bWALLSPRITE ? fRandom(3.0,4.0) : 0;
		Super.Tick();
	}
}

Class skp_BulletPuff : BulletPuff replaces BulletPuff
{
	Default
	{
		+ROLLSPRITE
		+ROLLCENTER
		+FORCEXYBILLBOARD
		-RANDOMIZE
		Decal "BulletChip";
	}
	Override Void PostBeginPlay()
	{
		if(ACS_ScriptCall("CVarCheck",2))
			A_SetRoll(Random(0,359));
		A_SetScale(frandom(0.9,1.1));
		Super.PostBeginPlay();
	}
	Override Void Tick()
	{
		//if(alpha >= 0.5)
			//A_SetRoll(Random(0,359));
		Super.Tick();
	}
	States
	{
	Spawn:
		PUFF A 4 Bright;
		PUFF B 4;
	Melee:
		PUFF CDEF 4
			{
				A_SetRenderStyle(0.5,STYLE_Translucent);
			}
		PUFF F 1 
			{
				A_SetScale(Scale.X+0.012);
				A_Fadeout(0.05);
			}
		Wait;
	}
}

class skp_RocketSmokeTrail : RocketSmokeTrail replaces RocketSmokeTrail
{
	Default
	{
		+ROLLSPRITE
		+ROLLCENTER
		+FORCEXYBILLBOARD
		VSpeed 0;
	}
	Override void PostBeginPlay()
	{
		if(CallACS("CVarCheck",3) <= 1)
			ResolveState("Death");
		else if(CallACS("CVarCheck",2))
			A_SetRoll(Random(0,359));
		super.PostBeginPlay();
	}
	States
	{
	Spawn:
		RSMK ABCD 5;
		RSMK E 1 A_Fadeout();
		Wait;
	Death:
		TNT1 A 0;
		Stop;
	}
}